{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li> <p>\ud83e\udde0 Smart PR Migration</p> <p>Open PRs become GitHub PRs, closed PRs become Issues with full metadata preservation. No more broken references or lost context.</p> </li> <li> <p>\ud83d\udee1\ufe0f Safe by Design</p> <p>Conservative approach prevents re-merging closed PRs. Comprehensive dry-run validation ensures successful migrations.</p> </li> <li> <p>\ud83d\udd0d Pre-Migration Audit</p> <p>See exactly what will migrate before you start. Get user mapping recommendations and gap analysis automatically.</p> </li> <li> <p>\ud83d\udd17 Automatic Link Rewriting</p> <p>Cross-references between issues and PRs are automatically updated to point to GitHub while preserving original context.</p> </li> </ul>"},{"location":"#bitbucket-github-migration-tools","title":"Bitbucket \u2192 GitHub Migration Tools","text":"<p>Intelligent \u2022 Safe \u2022 Comprehensive</p> <p>Migrate your Bitbucket Cloud repositories to GitHub with confidence using our smart migration platform that preserves everything while making intelligent decisions about PRs, branches, and metadata.</p> <p>\ud83d\ude80 Get Started \u2022 \ud83d\udcd6 Full Guide</p>"},{"location":"#key-features","title":"\u26a1 Key Features","text":""},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Install: <pre><code>pipx install bitbucket-migration\n</code></pre></p> <p>Example Usage: <pre><code>migrate_bitbucket_to_github audit --workspace YOUR_WORKSPACE --repo YOUR_REPO\nmigrate_bitbucket_to_github dry-run --config migration_config.json\n</code></pre></p>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li> <p>\ud83d\udcd6 Migration Guide</p> <p>Complete step-by-step migration process with detailed explanations, checklists, troubleshooting, and attachment upload instructions.</p> </li> <li> <p>\u2699\ufe0f Migration Config</p> <p>Configuration file format, user mapping, and repository mapping options.</p> </li> <li> <p>\ud83d\udccb Migration Details</p> <p>Detailed reference on what metadata is preserved and how non-migratable information is handled.</p> </li> <li> <p>\ud83d\udda5\ufe0f CLI Reference</p> <p>Command-line interface guide for audit, migration, and authentication scripts.</p> </li> <li> <p>\ud83d\udc65 User Mapping</p> <p>How to map Bitbucket users to GitHub accounts and handle unmapped users.</p> </li> <li> <p>\ud83d\udd11 API Tokens</p> <p>Setup guides for Bitbucket and GitHub API authentication.</p> </li> </ul> <p>Built with \u2764\ufe0f for reliable repository migrations</p> <p>\ud83d\udc1b Report Issues \u2022 \ud83d\udcda API References</p>"},{"location":"migration_guide/","title":"Bitbucket \u2192 GitHub Migration Guide","text":"<p>Version: 2.0\u2003\u2003Last Updated: 2025-10-18</p>"},{"location":"migration_guide/#overview","title":"Overview","text":"<p>This guide explains how to migrate a Bitbucket Cloud repository to GitHub, preserving:</p> <ul> <li>Git history (branches, tags, commits)</li> <li>Issues, pull requests, and comments</li> <li>Attachments (manual upload required)</li> <li>Author and timestamp metadata (as text)</li> </ul> <p>Important Safety Note</p> <p>Keep your Bitbucket repository intact (potentially archived) until migration is fully verified. If errors occur and migration is only partially completed, delete the GitHub repository and start fresh.</p>"},{"location":"migration_guide/#installation-and-setup","title":"Installation and Setup","text":"<ol> <li> <p>Install from PyPI (Recommended):     <pre><code>pipx install bitbucket-migration\n</code></pre>     Then use as follows. See CLI Reference Guide for detailed description     of the command line interface of the included scripts.     <pre><code>migrate_bitbucket_to_github audit --workspace YOUR_WORKSPACE --repo YOUR_REPO\nmigrate_bitbucket_to_github dry-run --config migration_config.json\n</code></pre></p> Alternative installation methods <p>Run Directly <pre><code>pipx run bitbucket-migration migrate_bitbucket_to_github audit --workspace YOUR_WORKSPACE --repo YOUR_REPO\n</code></pre></p> <p>From Source <pre><code>git clone https://github.com/fkloosterman/bitbucket-migration.git\ncd bitbucket-migration\npython migrate_bitbucket_to_github.py audit --workspace YOUR_WORKSPACE --repo YOUR_REPO\n</code></pre></p> </li> <li> <p>Set up Bitbucket and Github Tokens</p> <p>You will need a Bitbucket Cloud API Token (read access to repos, issues, PRs) and a GitHub Personal Access Token (PAT) with <code>repo</code> scope.</p> <p>See API Tokens Setup Guide for instructions on how to setup these tokens and to verify access.</p> </li> </ol>"},{"location":"migration_guide/#migration-steps","title":"Migration Steps","text":"<pre><code>flowchart TD\nA(\n  **1. Audit Bitbucket Repository**\n  Collect metadata and create config.\n) --&gt; B(\n  **2. Mirror Git Repository**\n  Copy commits, branches, and tags.\n)\nclick A \"#step-1-run-audit\" \"migrate_bitbucket_to_github audit\"\nclick B \"#step-2-prepare-github-repository\" \"Mirror Git Repo\"\n\nB --&gt; C(\n  **3. Tailor Configuration**\n  GitHub token, member mapping, repository mapping.\n)\nclick C \"#step-3-tailor-configuration\" \"Tailor Config\"\n\nC --&gt; D(\n  **4. Dry Run Migration**\n  Validate config and check migration of issues and PRs.\n)\nD --&gt; C\nclick D \"#step-4-dry-run-migration\" \"Dry Run Migration\"\n\nD --&gt; E(\n  **5. Run Full Migration**\n  Migrate issues, PRs, and comments.\n)\nclick E \"#step-5-run-full-migration\" \"Run Full Migration\"\n\nE --&gt; F(\n  **6. Upload Attachments**\n  Automated with --use-gh-cli or manual upload.\n)\nclick F \"#step-6-upload-attachments\" \"Upload Attachments\"\n\nF --&gt; G(\n  **6. Verify &amp; Clean Up**\n  Finalize and verify migration.\n)\nclick G \"#step-7-verify-and-clean-up\" \"Verify\"</code></pre>"},{"location":"migration_guide/#step-by-step-migration","title":"Step-by-Step Migration","text":""},{"location":"migration_guide/#step-1-run-audit","title":"Step 1 \u2014 Run Audit","text":"<p>Generates the initial configuration and user mapping.</p> <pre><code>migrate_bitbucket_to_github audit \\\n  --workspace WORKSPACE \\\n  --repo REPO \\\n  --email YOU@DOMAIN \\\n  --gh-owner GITHUB_USER \\\n  --gh-repo REPO\n</code></pre> <p>Outputs</p> <ul> <li><code>audit_report.md</code> \u2013 summary of repo data</li> <li><code>migration_config.json</code> \u2013 template for migration</li> <li><code>user_mapping_template.txt</code> \u2013 list of contributors</li> </ul> <p>Next: Edit the config file to map Bitbucket users to GitHub accounts. See User Mapping Reference.</p>"},{"location":"migration_guide/#step-2-mirror-repository","title":"Step 2 \u2014 Mirror Repository","text":"<ol> <li>Create an empty repository on GitHub.    Do not add a README or license.</li> <li>Keep it private until migration is complete.</li> </ol> <pre><code>git clone --mirror https://bitbucket.org/WORKSPACE/REPO.git\ncd REPO.git\ngit remote add github https://github.com/OWNER/REPO.git\ngit push --mirror github\n</code></pre> <p>Verify:</p> <pre><code>git ls-remote github\n</code></pre>"},{"location":"migration_guide/#step-3-tailor-configuration","title":"Step 3 - Tailor Configuration","text":"<p>Edit <code>migration_config.json</code> to set your tokens and user mappings. See Migration Config Reference for full details.</p> <ol> <li>Update Tokens</li> <li>Set <code>bitbucket.token</code> to your Bitbucket API token.</li> <li> <p>Set <code>github.token</code> to your GitHub PAT with <code>repo</code> scope.</p> </li> <li> <p>Configure User Mapping</p> </li> <li>Map Bitbucket display names to GitHub usernames in <code>user_mapping</code>.</li> <li> <p>Set unmapped or deleted users to <code>null</code>.</p> </li> <li> <p>Run Dry Run</p> </li> <li>After editing, run a dry run (Step 4) to validate.</li> <li>Refine mappings if needed.</li> </ol> Advanced Options <ul> <li>Add <code>repository_mapping</code> for cross-repository link rewriting.</li> <li>See Migration Config Reference for details.</li> </ul>"},{"location":"migration_guide/#step-4-dry-run-migration","title":"Step 4 \u2014 Dry Run Migration","text":"<p>Run a simulation of the migration to validate your configuration without making any changes.</p> <pre><code>migrate_bitbucket_to_github dry-run \\\n  --config migration_config.json\n</code></pre> <p>What it does: - Validates tokens and permissions. - Checks user mappings and repository access. - Estimates issue/PR counts and migration time. - Generates <code>migration_report_dry_run.md</code> with details.</p> <p>Check for: - Authentication success (no 401/403 errors). - Valid user mappings (no unmapped users warnings). - Correct counts matching your audit report. - If issues, refine <code>migration_config.json</code> and retry.</p> Advanced Options <ul> <li>Use <code>--skip-issues</code> or <code>--skip-prs</code> to test specific phases.</li> <li>See CLI Reference for all options.</li> </ul>"},{"location":"migration_guide/#step-5-run-full-migration","title":"Step 5 \u2014 Run Full Migration","text":"<p>Execute the actual migration of issues, PRs, comments, and attachments.</p> <pre><code>migrate_bitbucket_to_github migrate \\\n  --config migration_config.json\n</code></pre> <p>What it does: - Migrates issues and PRs (open PRs stay as PRs; closed PRs become issues). - Downloads attachments to <code>attachments_temp/</code>. - Generates <code>migration_mapping.json</code> for ID cross-references. - Creates <code>migration_report.md</code> with details and any issues.</p> Advanced Options <ul> <li>Use <code>--use-gh-cli</code> for automatic attachment upload.</li> <li>Use <code>--skip-issues</code> or <code>--skip-prs</code> to migrate selectively.</li> <li>See CLI Reference for all options.</li> </ul>"},{"location":"migration_guide/#step-6-upload-attachments","title":"Step 6 \u2014 Upload Attachments","text":"<p>Attachments are downloaded locally because GitHub\u2019s API doesn\u2019t support direct upload. Use the <code>--use-gh-cli</code> option in the migration script for automated upload, or follow the manual steps below.</p>"},{"location":"migration_guide/#automated-upload-recommended","title":"Automated Upload (Recommended)","text":"<p>Add <code>--use-gh-cli</code> to the migration command for automatic attachment upload:</p> <pre><code>migrate_bitbucket_to_github migrate --config migration_config.json --use-gh-cli\n</code></pre> <p>This requires GitHub CLI installed and authenticated.</p>"},{"location":"migration_guide/#manual-upload","title":"Manual Upload","text":"<ol> <li> <p>Locate Files <pre><code>cd attachments_temp/\nls -lh\n</code></pre></p> </li> <li> <p>Identify Targets     Check GitHub issues for comments like:     <pre><code>\ud83d\udcce **Attachment from Bitbucket**: `file.png` (size)\n</code></pre></p> </li> <li> <p>Upload</p> <ul> <li>Drag and drop files into issue comments on GitHub.</li> <li>Files preview inline or as links.</li> </ul> </li> <li> <p>Verify</p> <ul> <li>Confirm uploads in GitHub issues.</li> </ul> </li> </ol> Advanced Options <p>For bulk uploads or prioritization:</p> <p>Bulk Upload with GitHub CLI <pre><code>gh auth login\ncd attachments_temp\nwhile IFS=',' read -r file issue_num; do\n  gh issue comment \"$issue_num\" --repo OWNER/REPO --body \"**Attachment:** $file\" --attach \"$file\"\n  sleep 2\ndone &lt; attachment_mapping.csv\n</code></pre></p> <p>Prioritization | Priority | Files | Action | |----------|-------|--------| | Critical | Screenshots, docs | Upload first | | Optional | Old files | Skip if needed |</p> <p>Tracking &amp; Cleanup - Create <code>attachment-status.md</code> for progress. - Backup: <code>tar -czf attachments_backup.tar.gz attachments_temp/</code> - Delete: <code>rm -rf attachments_temp/</code> after verification.</p>"},{"location":"migration_guide/#step-7-verify-and-clean-up","title":"Step 7 \u2014 Verify and Clean Up","text":"<p>Confirm migration success and finalize the process.</p> <p>Essential Checks:</p> <ul> <li>Verify Git history: branches, tags, and commits match Bitbucket.</li> <li>Check issue/PR counts and content against audit report.</li> <li>Spot-check user mentions, comments, and timestamps.</li> <li>Confirm attachments are uploaded (if not using --use-gh-cli).</li> </ul> <p>Clean-Up Operations:</p> <ul> <li>Update README with new GitHub links and branch protections.</li> <li>Set Bitbucket repo to read-only or archive it.</li> <li>Clean up temporary files: <code>rm -rf attachments_temp/</code>.</li> <li>Archive migration reports and mappings for reference.</li> </ul>"},{"location":"migration_guide/#support-resources","title":"Support Resources","text":"<ul> <li>GitHub REST API Documentation</li> <li>Bitbucket Cloud API Documentation</li> <li>GitHub Support</li> </ul>"},{"location":"migration_guide/#checklist-before-asking-for-help","title":"Checklist Before Asking for Help","text":"<ul> <li>Confirm both API tokens are active and scoped correctly</li> <li>Compare audit vs. migrated item counts</li> <li>Check <code>migration_mapping.json</code> for missing IDs</li> <li>Search console logs for <code>ERROR</code> or <code>429</code></li> <li>Verify no network or disk errors occurred</li> </ul> <p>If problems persist, open a support ticket with a description of the error and the script version.</p>"},{"location":"migration_guide/#references","title":"\ud83d\udcda References","text":"<ul> <li>Migration Config Reference</li> <li>Migration Details Reference</li> <li>CLI Reference</li> <li>User Mapping Guide</li> <li>API Token Setup</li> </ul>"},{"location":"reference/api_tokens/","title":"API Tokens Setup Guide","text":"<p>This comprehensive guide explains all authentication requirements for the Bitbucket to GitHub migration tools, including the audit script, migration script, and optional GitHub CLI integration.</p>"},{"location":"reference/api_tokens/#authentication-overview","title":"\ud83d\udd11 Authentication Overview","text":"<p>The migration process requires multiple authentication methods depending on which tools you use:</p> Tool Bitbucket Token GitHub PAT GitHub CLI Purpose <code>migrate_bitbucket_to_github test-auth</code> \u2705 Required \u2705 Required \u274c Optional Test authentication <code>migrate_bitbucket_to_github audit</code> \u2705 Required \u274c Not needed \u274c Not needed Audit repository content <code>migrate_bitbucket_to_github dry-run</code> \u2705 Required \u2705 Required \u274c Optional Dr-run migrate issues/PRs <code>migrate_bitbucket_to_github migrate</code> \u2705 Required \u2705 Required \u274c Optional Migrate issues/PRs <code>migrate_bitbucket_to_github migrate --use-gh-cli</code> \u2705 Required \u2705 Required \u2705 Required Auto-upload attachments <p>Choose your path:</p> <ul> <li>Basic Migration: Bitbucket API Token + GitHub PAT</li> <li>Advanced Migration: All three authentication methods (for automatic attachment uploads)</li> </ul>"},{"location":"reference/api_tokens/#bitbucket-cloud-api-token","title":"\ud83d\udd11 Bitbucket Cloud API Token","text":"<p>Required for: <code>migrate_bitbucket_to_github audit</code>, <code>migrate_bitbucket_to_github migrate</code></p>"},{"location":"reference/api_tokens/#creating-your-token","title":"Creating Your Token","text":"<ol> <li>Go to Atlassian Account Settings \u2192 Security \u2192 Create and manage API tokens</li> <li>Click Create API token</li> <li>Name it: <code>Migration Tool</code></li> <li>Choose Bitbucket as the app</li> <li>Set Full access (or minimally: read repos, issues, PRs)</li> <li>Copy the token immediately \u2013 it won't be shown again</li> </ol>"},{"location":"reference/api_tokens/#required-permissions","title":"Required Permissions","text":"<pre><code>{\n  \"scopes\": [\n    \"repository:read\",\n    \"pullrequest:read\",\n    \"issue:read\",\n    \"account:read\"\n  ]\n}\n</code></pre> <p>Note: User-level API tokens (not Repository Access Tokens) are required for issue and PR access.</p>"},{"location":"reference/api_tokens/#usage-in-configuration","title":"Usage in Configuration","text":"<pre><code>\"bitbucket\": {\n  \"email\": \"you@example.com\",\n  \"token\": \"ATAT1234...\"\n}\n</code></pre>"},{"location":"reference/api_tokens/#github-authentication","title":"\ud83d\udd11 GitHub Authentication","text":"<p>Required for: <code>migrate_bitbucket_to_github dry-run</code> and <code>migrate_bitbucket_to_github migrate</code></p>"},{"location":"reference/api_tokens/#github-personal-access-token-pat","title":"GitHub Personal Access Token (PAT)","text":""},{"location":"reference/api_tokens/#creating-your-token_1","title":"Creating Your Token","text":"<ol> <li>Go to GitHub Settings \u2192 Developer settings \u2192 Personal access tokens (classic)</li> <li>Click Generate new token (classic)</li> <li>Name it <code>Bitbucket Migration</code></li> <li>Select scopes:<ul> <li><code>repo</code> (Full control of private repositories)</li> <li><code>user:email</code> (Read-only access to email addresses)</li> </ul> </li> <li>Click Generate token and copy it</li> </ol>"},{"location":"reference/api_tokens/#required-scopes-explained","title":"Required Scopes Explained","text":"Scope Purpose Why Needed <code>repo</code> Full repository access Create issues, PRs, comments, manage assignees <code>user:email</code> Read email addresses User mapping and author identification"},{"location":"reference/api_tokens/#usage-in-configuration_1","title":"Usage in Configuration","text":"<pre><code>\"github\": {\n  \"owner\": \"my-org\",\n  \"repo\": \"my-repo\",\n  \"token\": \"ghp_abcd123...\"\n}\n</code></pre>"},{"location":"reference/api_tokens/#github-cli-authentication-optional","title":"GitHub CLI Authentication (Optional)","text":"<p>Required only for: <code>--use-gh-cli</code> flag (automatic attachment uploads)</p>"},{"location":"reference/api_tokens/#setup-instructions","title":"Setup Instructions","text":"<ol> <li> <p>Install GitHub CLI: <pre><code># macOS\nbrew install gh\n\n# Ubuntu/Debian\nsudo apt update &amp;&amp; sudo apt install gh\n\n# Windows (using winget)\nwinget install --id GitHub.cli\n\n# Other platforms: https://cli.github.com/\n</code></pre></p> </li> <li> <p>Authenticate GitHub CLI: <pre><code>gh auth login\n\n# Follow prompts:\n# - GitHub.com\n# - HTTPS\n# - Login with web browser\n# - Authorize GitHub CLI\n</code></pre></p> </li> <li> <p>Verify authentication: <pre><code>gh auth status\n</code></pre></p> </li> </ol> <p>Important: GitHub CLI must be authenticated to the same GitHub account/organization as your PAT.</p>"},{"location":"reference/api_tokens/#token-security-best-practices","title":"\ud83d\udd27 Token Security Best Practices","text":""},{"location":"reference/api_tokens/#environment-variables-recommended","title":"Environment Variables (Recommended)","text":"<pre><code># Create .env file\nBITBUCKET_EMAIL=you@example.com\nBITBUCKET_TOKEN=ATAT1234...\nGITHUB_TOKEN=ghp_abcd123...\n\n# Load in your scripts\nmigrate_bitbucket_to_github audit --workspace $BITBUCKET_WORKSPACE --repo $BITBUCKET_REPO --email $BITBUCKET_EMAIL --token $BITBUCKET_TOKEN\n</code></pre>"},{"location":"reference/api_tokens/#security-guidelines","title":"Security Guidelines","text":"<ul> <li>Never commit tokens to Git repositories</li> <li>Use read-only tokens where possible (audit script only needs read access)</li> <li>Rotate tokens regularly (especially after migration completion)</li> <li>Use separate tokens for different purposes (audit vs migration)</li> <li>Delete unused tokens once migration is verified</li> <li>Store securely in password managers or secure credential storage</li> </ul>"},{"location":"reference/api_tokens/#token-permissions-matrix","title":"Token Permissions Matrix","text":"Operation Bitbucket Token GitHub PAT GitHub CLI Repository audit Read access Not needed Not needed Issue migration Read access Repo access Not needed PR migration Read access Repo access Not needed Attachment upload Read access Repo access Authenticated"},{"location":"reference/api_tokens/#authentication-testing","title":"\u2705 Authentication Testing","text":""},{"location":"reference/api_tokens/#test-bitbucket-authentication","title":"Test Bitbucket Authentication","text":"<p>Use the provided test script to verify your Bitbucket token:</p> <pre><code>migrate_bitbucket_to_github test-auth --workspace YOUR_WORKSPACE --repo YOUR_REPO --email you@example.com --token ATAT1234...\n</code></pre> <p>Expected output: <pre><code>\u2705 All tests passed! Your API Token is working correctly.\n</code></pre></p> <p>If tests fail: The script provides detailed troubleshooting guidance and token creation instructions.</p>"},{"location":"reference/api_tokens/#test-github-authentication","title":"Test GitHub Authentication","text":"<p>Verify your GitHub PAT works correctly:</p> <pre><code># Test basic authentication\ncurl -H \"Authorization: token ghp_abcd123...\" https://api.github.com/user\n\n# Test repository access\ncurl -H \"Authorization: token ghp_abcd123...\" https://api.github.com/repos/YOUR_ORG/YOUR_REPO\n\n# Test issue creation (dry run)\ncurl -X POST -H \"Authorization: token ghp_abcd123...\" \\\n  https://api.github.com/repos/YOUR_ORG/YOUR_REPO/issues \\\n  -d '{\"title\":\"Test Issue\",\"body\":\"Testing authentication\"}'\n</code></pre>"},{"location":"reference/api_tokens/#test-github-cli-authentication","title":"Test GitHub CLI Authentication","text":"<pre><code># Check authentication status\ngh auth status\n\n# Test repository access\ngh repo view YOUR_ORG/YOUR_REPO\n\n# Test issue creation (dry run)\ngh issue create --title \"Test Issue\" --body \"Testing CLI auth\" --repo YOUR_ORG/YOUR_REPO\n</code></pre>"},{"location":"reference/api_tokens/#troubleshooting-authentication-issues","title":"\ud83d\udd0d Troubleshooting Authentication Issues","text":""},{"location":"reference/api_tokens/#bitbucket-token-problems","title":"Bitbucket Token Problems","text":"<p>\"401 Unauthorized\"</p> <ul> <li>Verify token is correct (copy-paste errors are common)</li> <li>Check if token has expired</li> <li>Ensure you're using a user-level API token (not Repository Access Token)</li> <li>Confirm token has issue and PR read permissions</li> </ul> <p>\"403 Forbidden\"</p> <ul> <li>Token may lack required permissions</li> <li>Repository may be private and token doesn't have access</li> <li>Workspace access may be restricted</li> </ul> <p>\"404 Not Found\"</p> <ul> <li>Verify workspace and repository names are correct</li> <li>Check if repository exists and is accessible</li> </ul>"},{"location":"reference/api_tokens/#github-token-problems","title":"GitHub Token Problems","text":"<p>\"401 Unauthorized\"</p> <ul> <li>Verify PAT is correct and not expired</li> <li>Check if PAT has <code>repo</code> scope enabled</li> <li>Ensure you're using a classic token (not fine-grained)</li> </ul> <p>\"403 Forbidden\"</p> <ul> <li>PAT may lack required scopes</li> <li>Repository may be private and PAT doesn't have access</li> <li>Organization may require PAT approval</li> </ul> <p>\"404 Not Found\"</p> <ul> <li>Verify repository exists and is accessible</li> <li>Check if organization/repository names are correct</li> </ul>"},{"location":"reference/api_tokens/#github-cli-problems","title":"GitHub CLI Problems","text":"<p>\"gh: Not logged in\" <pre><code>gh auth login\n</code></pre></p> <p>\"Repository not found\"</p> <ul> <li>Verify repository exists</li> <li>Check if CLI is authenticated to correct GitHub account</li> <li>Ensure repository is accessible with current authentication</li> </ul> <p>\"Permission denied\"</p> <ul> <li>CLI may be authenticated to different account than PAT</li> <li>Repository may require different access level</li> <li>Organization may restrict CLI access</li> </ul>"},{"location":"reference/api_tokens/#integration-issues","title":"Integration Issues","text":"<p>\"GitHub CLI not available\" (when using --use-gh-cli)</p> <ul> <li>Install GitHub CLI: https://cli.github.com/</li> <li>Verify installation: <code>gh --version</code></li> <li>Authenticate: <code>gh auth login</code></li> </ul> <p>\"Authentication mismatch\"</p> <ul> <li>Ensure GitHub PAT and CLI are authenticated to same account</li> <li>Check if you're a member of the target organization</li> <li>Verify repository access permissions</li> </ul>"},{"location":"reference/api_tokens/#verification-workflow","title":"\ud83d\udca1 Verification Workflow","text":""},{"location":"reference/api_tokens/#before-running-audit-script","title":"Before Running Audit Script","text":"<ol> <li> <p>Test Bitbucket authentication: <pre><code>migrate_bitbucket_to_github test-auth --workspace YOUR_WORKSPACE --repo YOUR_REPO --email you@example.com --token ATAT1234...\n</code></pre></p> </li> <li> <p>Verify repository access: <pre><code>curl -u you@example.com:ATAT1234... https://api.bitbucket.org/2.0/repositories/YOUR_WORKSPACE/YOUR_REPO\n</code></pre></p> </li> <li> <p>Run audit script: <pre><code>migrate_bitbucket_to_github audit --workspace YOUR_WORKSPACE --repo YOUR_REPO --email you@example.com --token ATAT1234...\n</code></pre></p> </li> </ol>"},{"location":"reference/api_tokens/#before-running-migration-script","title":"Before Running Migration Script","text":"<ol> <li> <p>Test GitHub PAT: <pre><code>curl -H \"Authorization: token ghp_123...\" https://api.github.com/user\n</code></pre></p> </li> <li> <p>Test repository access: <pre><code>curl -H \"Authorization: token ghp_123...\" https://api.github.com/repos/YOUR_ORG/YOUR_REPO\n</code></pre></p> </li> <li> <p>Test GitHub CLI (if using --use-gh-cli): <pre><code>gh auth status\ngh repo view YOUR_ORG/YOUR_REPO\n</code></pre></p> </li> <li> <p>Run dry-run migration: <pre><code>migrate_bitbucket_to_github dry-run --config config.json\n</code></pre></p> </li> </ol>"},{"location":"reference/api_tokens/#after-authentication-issues","title":"After Authentication Issues","text":"<ol> <li>Check token scopes and permissions</li> <li>Verify repository access</li> <li>Test with minimal operations first</li> <li>Use dry-run modes to validate setup</li> <li>Check the troubleshooting guides above</li> </ol>"},{"location":"reference/api_tokens/#quick-start-commands","title":"\ud83d\ude80 Quick Start Commands","text":""},{"location":"reference/api_tokens/#basic-setup-no-attachments","title":"Basic Setup (No Attachments)","text":"<pre><code># 1. Test Bitbucket token\nmigrate_bitbucket_to_github test-auth --workspace myteam --repo myrepo --email me@company.com --token ATAT123...\n\n# 2. Run audit\nmigrate_bitbucket_to_github audit --workspace myteam --repo myrepo --email me@company.com --token ATAT123...\n\n# 3. Test GitHub PAT\ncurl -H \"Authorization: token ghp_456...\" https://api.github.com/user\n\n# 4. Run migration dry-run\nmigrate_bitbucket_to_github dry-run --config config.json\n</code></pre>"},{"location":"reference/api_tokens/#advanced-setup-with-auto-upload","title":"Advanced Setup (With Auto-Upload)","text":"<pre><code># 1. Install and setup GitHub CLI\ngh auth login\n\n# 2. Test CLI authentication\ngh auth status\n\n# 3. Run migration with auto-upload\nmigrate_bitbucket_to_github migrate --config config.json --use-gh-cli\n</code></pre>"},{"location":"reference/api_tokens/#token-requirements-summary","title":"\ud83d\udccb Token Requirements Summary","text":"Feature Bitbucket Token GitHub PAT GitHub CLI Repository audit \u2705 User-level, read access \u274c \u274c Issue migration \u2705 User-level, read access \u2705 <code>repo</code> scope \u274c PR migration \u2705 User-level, read access \u2705 <code>repo</code> scope \u274c Attachment upload \u2705 User-level, read access \u2705 <code>repo</code> scope \u2705 Authenticated User mapping \u2705 User-level, read access \u2705 <code>repo</code>, <code>user:email</code> \u274c <p>Key Points:</p> <ul> <li>Always use user-level Bitbucket API tokens (not Repository Access Tokens)</li> <li>GitHub PAT requires <code>repo</code> scope for full functionality</li> <li>GitHub CLI is only needed for automatic attachment uploads</li> <li>Test authentication before running migration scripts</li> <li>Use dry-run modes to validate your setup</li> </ul>"},{"location":"reference/architecture/","title":"Architecture Reference","text":"<p>This document describes the architecture of the bitbucket_migration package, providing developers with an understanding of the main components, their responsibilities, and how they interact.</p>"},{"location":"reference/architecture/#introduction","title":"Introduction","text":"<p>The bitbucket_migration package uses a modular, orchestrator-based architecture to handle the migration process from Bitbucket to GitHub. The design emphasizes separation of concerns, with specialized components for API interactions, data processing, and migration logic. This allows for easy testing, maintenance, and extension.</p> <p>Key design principles:</p> <ul> <li>Modularity: Each component has a single responsibility.</li> <li>Orchestration: A central coordinator manages the workflow.</li> <li>Security: Secure handling of API tokens and configuration.</li> <li>Extensibility: Services and formatters can be easily added or modified.</li> </ul>"},{"location":"reference/architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TD\n    A[CLI Entry Point] --&gt; B[AuditOrchestrator]\n    A --&gt; C[MigrationOrchestrator]\n    B --&gt; D[BitbucketClient]\n    C --&gt; D\n    C --&gt; E[GitHubClient]\n    C --&gt; F[GitHubCliClient]\n    C --&gt; G[Services: UserMapper, LinkRewriter, AttachmentHandler]\n    C --&gt; H[Migrators: IssueMigrator, PullRequestMigrator]\n    C --&gt; I[Formatters: FormatterFactory]\n    C --&gt; J[ReportGenerator]\n    D --&gt; K[Bitbucket API]\n    E --&gt; L[GitHub API]\n    F --&gt; M[GitHub CLI]</code></pre>"},{"location":"reference/architecture/#main-components","title":"Main Components","text":""},{"location":"reference/architecture/#core-orchestrators","title":"Core Orchestrators","text":"<ul> <li>MigrationOrchestrator (<code>src/bitbucket_migration/core/orchestrator.py</code>): Central coordinator for the migration process. Initializes components, fetches data, executes migrations, and generates reports.</li> <li>AuditOrchestrator (<code>src/bitbucket_migration/audit/audit_orchestrator.py</code>): Handles pre-migration analysis, generating audit reports and configuration templates.</li> </ul>"},{"location":"reference/architecture/#api-clients","title":"API Clients","text":"<ul> <li>BitbucketClient (<code>src/bitbucket_migration/clients/bitbucket_client.py</code>): Interfaces with Bitbucket API for fetching issues, PRs, milestones, etc.</li> <li>GitHubClient (<code>src/bitbucket_migration/clients/github_client.py</code>): Interfaces with GitHub API for creating issues, PRs, comments, etc.</li> <li>GitHubCliClient (<code>src/bitbucket_migration/clients/github_cli_client.py</code>): Wraps GitHub CLI for attachment uploads and authentication checks.</li> </ul>"},{"location":"reference/architecture/#services","title":"Services","text":"<ul> <li>UserMapper (<code>src/bitbucket_migration/services/user_mapper.py</code>): Maps Bitbucket users to GitHub accounts, resolving account IDs.</li> <li>LinkRewriter (<code>src/bitbucket_migration/services/link_rewriter.py</code>): Rewrites cross-references between issues and PRs to point to GitHub.</li> <li>AttachmentHandler (<code>src/bitbucket_migration/services/attachment_handler.py</code>): Downloads attachments from Bitbucket and uploads to GitHub (via CLI or manual).</li> </ul>"},{"location":"reference/architecture/#migrators","title":"Migrators","text":"<ul> <li>IssueMigrator (<code>src/bitbucket_migration/migration/issue_migrator.py</code>): Handles migration of issues, including comments and attachments.</li> <li>PullRequestMigrator (<code>src/bitbucket_migration/migration/pr_migrator.py</code>): Migrates PRs, deciding whether to create GitHub PRs or issues based on branch existence and status.</li> </ul>"},{"location":"reference/architecture/#formatters-and-reports","title":"Formatters and Reports","text":"<ul> <li>FormatterFactory (<code>src/bitbucket_migration/formatters/formatter_factory.py</code>): Creates formatters for content (e.g., Markdown, HTML).</li> <li>ReportGenerator (<code>src/bitbucket_migration/migration/report_generator.py</code>): Generates migration reports and mappings.</li> </ul>"},{"location":"reference/architecture/#configuration-and-utilities","title":"Configuration and Utilities","text":"<ul> <li>MigrationConfig (<code>src/bitbucket_migration/config/migration_config.py</code>): Data structures for configuration.</li> <li>SecureConfigLoader (<code>src/bitbucket_migration/config/secure_config.py</code>): Loads configuration securely, supporting environment variables.</li> <li>Logging and Exceptions: Custom logging (<code>utils/logging_config.py</code>) and exceptions (<code>exceptions.py</code>) for error handling.</li> </ul>"},{"location":"reference/architecture/#interactions-and-data-flow","title":"Interactions and Data Flow","text":"<ol> <li>CLI Invocation: User runs commands like <code>migrate</code> or <code>audit</code> via the main script.</li> <li>Orchestrator Setup: MigrationOrchestrator initializes clients, services, and migrators based on config.</li> <li>Data Fetching: BitbucketClient fetches issues, PRs, milestones from Bitbucket API.</li> <li>Processing: UserMapper builds mappings, LinkRewriter updates references, AttachmentHandler downloads files.</li> <li>Migration Execution: IssueMigrator and PullRequestMigrator create content on GitHub via GitHubClient.</li> <li>Reporting: ReportGenerator produces summaries and mappings.</li> <li>Attachment Handling: If enabled, GitHubCliClient uploads attachments.</li> </ol> <p>The orchestrator ensures sequential execution, with error handling and partial saves on interruption.</p>"},{"location":"reference/cli_reference/","title":"CLI Reference Guide","text":"<p>This comprehensive guide covers the command-line interface for the unified migration tool <code>migrate_bitbucket_to_github</code>, which includes subcommands for authentication testing, repository auditing, and data migration. All functionality is integrated into a single script with subcommands for a streamlined workflow.</p>"},{"location":"reference/cli_reference/#subcommand-overview","title":"\ud83d\udccb Subcommand Overview","text":"Subcommand Purpose When to Use test-auth Authentication testing Before audit to verify API access audit Repository analysis Before migration to understand scope dry-run Simulate migration To validate setup without making changes migrate Data migration After audit and preparation"},{"location":"reference/cli_reference/#authentication-testing-test-auth-subcommand","title":"\ud83d\udd10 Authentication Testing: <code>test-auth</code> Subcommand","text":"<p>Tests Bitbucket and GitHub API authentication and permissions before running the audit.</p>"},{"location":"reference/cli_reference/#basic-syntax","title":"Basic Syntax","text":"<pre><code>migrate_bitbucket_to_github test-auth --workspace WORKSPACE --repo REPO --email EMAIL [OPTIONS]\n</code></pre>"},{"location":"reference/cli_reference/#arguments","title":"Arguments","text":"<p>Note: missing arguments will be prompted if not provided. | Argument | Description | Example | |----------|-------------|---------| | <code>--workspace</code> | Bitbucket workspace name | <code>myteam</code> | | <code>--repo</code> | Repository name | <code>myproject</code> | | <code>--email</code> | Atlassian account email | <code>user@example.com</code> | | <code>--token</code> | Bitbucket API token | <code>ATAT123...</code> | | <code>--gh-owner</code> | GitHub owner | <code>myusername</code> | | <code>--gh-repo</code> | GitHub repository name | <code>myproject</code> | | <code>--gh-token</code> | GitHub API token | <code>ghp_...</code> |</p>"},{"location":"reference/cli_reference/#examples","title":"Examples","text":""},{"location":"reference/cli_reference/#simple-authentication-test","title":"Simple Authentication Test","text":"<pre><code># Tokens will be prompted interactively\nmigrate_bitbucket_to_github test-auth --workspace myteam --repo myproject --email user@example.com --gh-owner myusername --gh-repo myproject\n</code></pre>"},{"location":"reference/cli_reference/#authentication-test-with-tokens","title":"Authentication Test with Tokens","text":"<pre><code>migrate_bitbucket_to_github test-auth --workspace myteam --repo myproject \\\n  --email user@example.com \\\n  --token ATAT1234567890abcdef \\\n  --gh-owner myusername \\\n  --gh-repo myproject \\\n  --gh-token ghp_1234567890abcdef\n</code></pre>"},{"location":"reference/cli_reference/#batch-testing-multiple-repositories","title":"Batch Testing Multiple Repositories","text":"<pre><code># Test multiple repos in the same workspace\nfor repo in repo1 repo2 repo3; do\n  migrate_bitbucket_to_github test-auth --workspace myteam --repo $repo --email user@example.com --token $TOKEN --gh-owner myusername --gh-repo $repo --gh-token $GH_TOKEN\ndone\n</code></pre>"},{"location":"reference/cli_reference/#what-it-tests","title":"What It Tests","text":"<ul> <li>\u2705 Repository access and metadata</li> <li>\u2705 Issues API permissions</li> <li>\u2705 Pull requests API access</li> <li>\u2705 Authentication credentials validity</li> </ul>"},{"location":"reference/cli_reference/#expected-output","title":"Expected Output","text":"<pre><code>Testing Bitbucket API Authentication\n============================================================\nWorkspace: myteam\nRepository: myproject\nEmail: user@example.com\nUsing user-level API Token authentication\n============================================================\n\nTest 1/3: Repository Info\n  Verify repository access\n  URL: https://api.bitbucket.org/2.0/repositories/myteam/myproject\n  \u2705 SUCCESS (200 OK)\n     Repository: myproject\n\nTest 2/3: Issues List\n  Verify issues API access\n  URL: https://api.bitbucket.org/2.0/repositories/myteam/myproject/issues\n  \u2705 SUCCESS (200 OK)\n     Found 42 items\n\nTest 3/3: Pull Requests List\n  Verify pull requests API access\n  URL: https://api.bitbucket.org/2.0/repositories/myteam/myproject/pullrequests\n  \u2705 SUCCESS (200 OK)\n     Found 18 items\n\n============================================================\n\u2705 All tests passed! Your API Token is working correctly.\nYou can now run the full audit script.\n============================================================\n</code></pre>"},{"location":"reference/cli_reference/#repository-audit-audit-subcommand","title":"\ud83d\udd0d Repository Audit: <code>audit</code> Subcommand","text":"<p>Performs comprehensive analysis of Bitbucket repository content for migration planning.</p>"},{"location":"reference/cli_reference/#basic-syntax_1","title":"Basic Syntax","text":"<pre><code>migrate_bitbucket_to_github audit --workspace WORKSPACE --repo REPO --email EMAIL [OPTIONS]\n</code></pre>"},{"location":"reference/cli_reference/#required-arguments","title":"Required Arguments","text":"Argument Description Example <code>--workspace</code> Bitbucket workspace name <code>myteam</code> <code>--repo</code> Repository name <code>myproject</code> <code>--email</code> Atlassian account email <code>user@example.com</code> <code>--token</code> API token (prompts if not provided) <code>ATAT123...</code>"},{"location":"reference/cli_reference/#optional-arguments","title":"Optional Arguments","text":"Argument Description Example <code>--no-config</code> Do not generate migration configuration template (default is to generate) <code>--gh-owner</code> GitHub username/org for config template <code>myusername</code> <code>--gh-repo</code> GitHub repository name for config template <code>myproject</code> <p>Note: Missing required arguments will be prompted for interactively.</p>"},{"location":"reference/cli_reference/#examples_1","title":"Examples","text":""},{"location":"reference/cli_reference/#basic-repository-audit","title":"Basic Repository Audit","text":"<pre><code># Token will be prompted interactively\nmigrate_bitbucket_to_github audit --workspace myteam --repo myproject --email user@example.com\n</code></pre>"},{"location":"reference/cli_reference/#audit-with-token-provided","title":"Audit with Token Provided","text":"<pre><code>migrate_bitbucket_to_github audit --workspace myteam --repo myproject \\\n  --email user@example.com \\\n  --token ATAT1234567890abcdef\n</code></pre>"},{"location":"reference/cli_reference/#generate-migration-configuration","title":"Generate Migration Configuration","text":"<pre><code>migrate_bitbucket_to_github audit --workspace myteam --repo myproject \\\n  --email user@example.com \\\n  --gh-owner mygithubusername \\\n  --gh-repo myproject\n</code></pre>"},{"location":"reference/cli_reference/#automated-audit-pipeline","title":"Automated Audit Pipeline","text":"<pre><code>#!/bin/bash\n# audit_and_config.sh - Automated audit for multiple repositories\n\nWORKSPACE=\"myteam\"\nEMAIL=\"user@example.com\"\nTOKEN=\"ATAT123...\"\n\nfor repo in $(cat repos_to_migrate.txt); do\n  echo \"Auditing $repo...\"\n  migrate_bitbucket_to_github audit \\\n    --workspace $WORKSPACE \\\n    --repo $repo \\\n    --email $EMAIL \\\n    --token $TOKEN \\\n    --gh-owner mygithubusername \\\n    --gh-repo $repo\n\n  echo \"Audit complete for $repo\"\n  echo \"Configuration saved to migration_config.json\"\n  echo \"Edit user mappings before running migration\"\n  echo \"---\"\ndone\n</code></pre>"},{"location":"reference/cli_reference/#generated-files","title":"Generated Files","text":""},{"location":"reference/cli_reference/#bitbucket_audit_reportjson","title":"<code>bitbucket_audit_report.json</code>","text":"<p>Complete audit data in JSON format containing:</p> <ul> <li>Issue and PR counts, states, and gaps</li> <li>User activity analysis</li> <li>Attachment inventory with sizes</li> <li>Milestone and label usage</li> <li>Migration time estimates</li> </ul>"},{"location":"reference/cli_reference/#audit_reportmd","title":"<code>audit_report.md</code>","text":"<p>Human-readable markdown report with:</p> <ul> <li>Executive summary</li> <li>Detailed issue/PR analysis</li> <li>User activity breakdown</li> <li>Migration estimates</li> <li>Next steps and recommendations</li> </ul>"},{"location":"reference/cli_reference/#migration_configjson","title":"<code>migration_config.json</code>","text":"<p>Migration configuration template with:</p> <ul> <li>Pre-filled Bitbucket credentials</li> <li>User mapping template</li> <li>GitHub repository settings</li> </ul>"},{"location":"reference/cli_reference/#user_mapping_templatetxt","title":"<code>user_mapping_template.txt</code>","text":"<p>User mapping reference showing:</p> <ul> <li>All users found in repository</li> <li>Activity counts for each user</li> <li>Multiple mapping format examples</li> </ul>"},{"location":"reference/cli_reference/#audit-output-example","title":"Audit Output Example","text":"<pre><code>================================================================================\nBITBUCKET MIGRATION AUDIT REPORT\nRepository: myteam/myproject\nAudit Date: 2024-01-15T10:30:45\n================================================================================\n\n\ud83d\udccb ISSUES\n  Total Issues: 156\n  States: {'open': 23, 'closed': 133}\n  Number Range: #1 - #200\n  Number Gaps: 44 missing issue numbers\n  Total Comments: 892\n  Issues with Attachments: 12\n\n\ud83d\udd00 PULL REQUESTS\n  Total PRs: 89\n  States: {'OPEN': 5, 'MERGED': 78, 'DECLINED': 6}\n  Number Range: #1 - #95\n  Number Gaps: 6 missing PR numbers\n  Total Comments: 445\n\n\ud83d\udcce ATTACHMENTS\n  Total Files: 28\n  Total Size: 45.2 MB\n\n\ud83d\udc65 USERS\n  Unique Users: 34\n\n\ud83c\udff7\ufe0f  MILESTONES\n  Total: 8\n\n\ud83d\udcca MIGRATION ESTIMATES\n  Placeholder Issues Needed: 44\n  Estimated API Calls: ~850\n  Estimated Time: ~14 minutes\n\n================================================================================\nReport saved to: bitbucket_audit_report.json\n================================================================================\n</code></pre>"},{"location":"reference/cli_reference/#data-migration-migrate-subcommand","title":"\ud83d\ude80 Data Migration: <code>migrate</code> Subcommand","text":"<p>Migrates repository data from Bitbucket to GitHub with intelligent handling of different content types.</p>"},{"location":"reference/cli_reference/#basic-syntax_2","title":"Basic Syntax","text":"<pre><code>migrate_bitbucket_to_github migrate --config CONFIG_FILE [OPTIONS]\n</code></pre>"},{"location":"reference/cli_reference/#required-arguments_1","title":"Required Arguments","text":"Argument Description Example <code>--config</code> Path to configuration JSON file <code>migration_config.json</code>"},{"location":"reference/cli_reference/#optional-arguments_1","title":"Optional Arguments","text":"<p>Note: Missing required arguments will be prompted for interactively.</p> Argument Description Example <code>--dry-run</code> Simulate migration without making changes <code>--skip-issues</code> Skip issue migration phase <code>--skip-prs</code> Skip pull request migration phase <code>--skip-pr-as-issue</code> Skip migrating closed PRs as issues <code>--use-gh-cli</code> Auto-upload attachments using GitHub CLI"},{"location":"reference/cli_reference/#examples_2","title":"Examples","text":""},{"location":"reference/cli_reference/#dry-run-recommended-first-step","title":"Dry Run (Recommended First Step)","text":"<pre><code>migrate_bitbucket_to_github --config migration_config.json --dry-run\n</code></pre>"},{"location":"reference/cli_reference/#full-migration-basic","title":"Full Migration (Basic)","text":"<pre><code>migrate_bitbucket_to_github --config migration_config.json\n</code></pre>"},{"location":"reference/cli_reference/#issues-only-migration","title":"Issues Only Migration","text":"<pre><code>migrate_bitbucket_to_github --config migration_config.json --skip-prs\n</code></pre>"},{"location":"reference/cli_reference/#pull-requests-only-migration","title":"Pull Requests Only Migration","text":"<pre><code>migrate_bitbucket_to_github --config migration_config.json --skip-issues\n</code></pre>"},{"location":"reference/cli_reference/#migration-with-automatic-attachment-upload","title":"Migration with Automatic Attachment Upload","text":"<pre><code># Requires GitHub CLI installed and authenticated\nmigrate_bitbucket_to_github --config migration_config.json --use-gh-cli\n</code></pre>"},{"location":"reference/cli_reference/#advanced-migration-with-selective-options","title":"Advanced Migration with Selective Options","text":"<pre><code>migrate_bitbucket_to_github --config migration_config.json \\\n  --skip-pr-as-issue \\\n  --use-gh-cli\n</code></pre>"},{"location":"reference/cli_reference/#batch-migration-script","title":"Batch Migration Script","text":"<pre><code>#!/bin/bash\n# migrate_multiple.sh - Migrate multiple repositories\n\nCONFIG_DIR=\"./configs\"\nATTACHMENTS_DIR=\"./attachments_temp\"\n\nfor config in $CONFIG_DIR/*.json; do\n  repo_name=$(basename \"$config\" .json)\n  echo \"Migrating $repo_name...\"\n\n  # Create separate attachments directory for each repo\n  mkdir -p \"$ATTACHMENTS_DIR/$repo_name\"\n\n  # Run migration with auto-upload\n  migrate_bitbucket_to_github \\\n    --config \"$config\" \\\n    --use-gh-cli\n\n  echo \"Migration complete for $repo_name\"\n  echo \"Attachments: $ATTACHMENTS_DIR/$repo_name/\"\n  echo \"---\"\ndone\n</code></pre>"},{"location":"reference/cli_reference/#migration-strategy","title":"Migration Strategy","text":""},{"location":"reference/cli_reference/#issues-migration","title":"Issues Migration","text":"<ul> <li>All Bitbucket issues become GitHub issues</li> <li>Original numbering preserved with placeholders for gaps</li> <li>Comments and attachments migrated</li> <li>Assignees and labels preserved where possible</li> </ul>"},{"location":"reference/cli_reference/#pull-requests-migration","title":"Pull Requests Migration","text":"<ul> <li>OPEN PRs with existing branches \u2192 GitHub PRs (if branches exist on GitHub)</li> <li>OPEN PRs with missing branches \u2192 GitHub Issues</li> <li>MERGED/DECLINED/SUPERSEDED PRs \u2192 GitHub Issues (safest approach)</li> </ul>"},{"location":"reference/cli_reference/#link-rewriting","title":"Link Rewriting","text":"<ul> <li>Cross-references between issues/PRs automatically updated</li> <li>GitHub links become primary, Bitbucket references preserved</li> <li>Format: <code>[#123](github_url) *(was [BB #123](bitbucket_url))*</code></li> </ul>"},{"location":"reference/cli_reference/#generated-files_1","title":"Generated Files","text":""},{"location":"reference/cli_reference/#migration_mappingjson","title":"<code>migration_mapping.json</code>","text":"<p>Machine-readable mapping of Bitbucket \u2192 GitHub numbers: <pre><code>{\n  \"bitbucket\": {\n    \"workspace\": \"myteam\",\n    \"repo\": \"myproject\"\n  },\n  \"github\": {\n    \"owner\": \"myusername\",\n    \"repo\": \"myproject\"\n  },\n  \"issue_mapping\": {\n    \"1\": 5,\n    \"2\": 6,\n    \"3\": 8\n  },\n  \"pr_mapping\": {\n    \"1\": 7,\n    \"2\": 9\n  }\n}\n</code></pre></p>"},{"location":"reference/cli_reference/#migration_reportmd","title":"<code>migration_report.md</code>","text":"<p>Comprehensive markdown report with:</p> <ul> <li>Migration statistics and timing</li> <li>Detailed issue/PR migration tables</li> <li>User mapping summary</li> <li>Unhandled links and unmapped mentions</li> <li>Troubleshooting notes</li> </ul>"},{"location":"reference/cli_reference/#attachments_temp","title":"<code>attachments_temp/</code>","text":"<p>Directory containing downloaded attachments for manual upload (unless using <code>--use-gh-cli</code>).</p>"},{"location":"reference/cli_reference/#recommended-workflow","title":"\ud83d\udd04 Recommended Workflow","text":""},{"location":"reference/cli_reference/#phase-1-preparation-and-testing","title":"Phase 1: Preparation and Testing","text":"<pre><code># 1. Test authentication\nmigrate_bitbucket_to_github test-auth --workspace myteam --repo myproject --email user@example.com --gh-owner mygithubusername --gh-repo myproject\n\n# 2. Run comprehensive audit\nmigrate_bitbucket_to_github audit --workspace myteam --repo myproject \\\n  --email user@example.com \\\n  --gh-owner mygithubusername \\\n  --gh-repo myproject\n\n# 3. Review audit results\ncat audit_report.md\nls -la bitbucket_*.json\n\n# 4. Edit configuration\nvim migration_config.json\nvim user_mapping_template.txt\n</code></pre>"},{"location":"reference/cli_reference/#phase-2-pre-migration-validation","title":"Phase 2: Pre-Migration Validation","text":"<pre><code># 5. Test migration setup (dry run)\nmigrate_bitbucket_to_github --config migration_config.json --dry-run\n\n# 6. Review dry-run results\ncat migration_report_dry_run.md\n\n# 7. Fix any issues found in dry run\n# - Update user mappings\n# - Check GitHub repository exists and is empty\n# - Verify git history is pushed\n</code></pre>"},{"location":"reference/cli_reference/#phase-3-actual-migration","title":"Phase 3: Actual Migration","text":"<pre><code># 8. Run the migration\nmigrate_bitbucket_to_github --config migration_config.json\n\n# 9. Review migration results\ncat migration_report.md\n\n# 10. Handle attachments (if not using --use-gh-cli)\n# Manually upload files from attachments_temp/ to GitHub issues\n</code></pre>"},{"location":"reference/cli_reference/#phase-4-post-migration-verification","title":"Phase 4: Post-Migration Verification","text":"<pre><code># 11. Verify migration completeness\nls -la migration_*.json migration_*.md\n\n# 12. Check for unmapped mentions or unhandled links\ngrep -n \"Unmapped\\|Unhandled\" migration_report.md\n\n# 13. Clean up (after verification)\nrm -rf attachments_temp/\n# Keep reports and mappings for reference\n</code></pre>"},{"location":"reference/cli_reference/#common-use-cases","title":"\ud83d\udee0\ufe0f Common Use Cases","text":""},{"location":"reference/cli_reference/#use-case-1-simple-repository-migration","title":"Use Case 1: Simple Repository Migration","text":"<pre><code># For straightforward migrations with minimal attachments\nmigrate_bitbucket_to_github test-auth --workspace myteam --repo myproject --email user@example.com --gh-owner myuser --gh-repo myproject\nmigrate_bitbucket_to_github audit --workspace myteam --repo myproject --email user@example.com --gh-owner myuser --gh-repo myproject\nmigrate_bitbucket_to_github dry-run --config migration_config.json\nmigrate_bitbucket_to_github migrate --config migration_config.json\n</code></pre>"},{"location":"reference/cli_reference/#use-case-2-large-repository-with-many-attachments","title":"Use Case 2: Large Repository with Many Attachments","text":"<pre><code># For repositories with many/large attachments\nmigrate_bitbucket_to_github test-auth --workspace myteam --repo large-repo --email user@example.com --gh-owner myuser --gh-repo large-repo\nmigrate_bitbucket_to_github audit --workspace myteam --repo large-repo --email user@example.com --gh-owner myuser --gh-repo large-repo\n\n# Install and setup GitHub CLI for auto-upload\ngh auth login\n\n# Run migration with auto-upload\nmigrate_bitbucket_to_github migrate --config migration_config.json --use-gh-cli\n</code></pre>"},{"location":"reference/cli_reference/#use-case-3-issues-only-migration","title":"Use Case 3: Issues-Only Migration","text":"<pre><code># When you only want to migrate issues, not PRs\nmigrate_bitbucket_to_github test-auth --workspace myteam --repo issues-only --email user@example.com --gh-owner myuser --gh-repo issues-only\nmigrate_bitbucket_to_github audit --workspace myteam --repo issues-only --email user@example.com --gh-owner myuser --gh-repo issues-only\nmigrate_bitbucket_to_github migrate --config migration_config.json --skip-prs\n</code></pre>"},{"location":"reference/cli_reference/#use-case-4-enterprise-migration-with-multiple-repositories","title":"Use Case 4: Enterprise Migration with Multiple Repositories","text":"<pre><code>#!/bin/bash\n# enterprise_migration.sh\n\nORG=\"myenterprise\"\nEMAIL=\"admin@company.com\"\nGH_ORG=\"myenterprise\"\n\n# Migrate all repositories\nfor repo in $(cat repo_list.txt); do\n  echo \"Migrating $ORG/$repo...\"\n\n  # Test and audit\n  migrate_bitbucket_to_github test-auth --workspace $ORG --repo $repo --email $EMAIL --gh-owner $GH_ORG --gh-repo $repo\n  migrate_bitbucket_to_github audit --workspace $ORG --repo $repo --email $EMAIL --gh-owner $GH_ORG --gh-repo $repo\n\n  # Edit configuration with enterprise settings\n  # ... manual step: edit migration_config.json ...\n\n  # Migrate\n  migrate_bitbucket_to_github migrate --config migration_config.json --use-gh-cli\n\n  echo \"Completed migration for $repo\"\ndone\n</code></pre>"},{"location":"reference/cli_reference/#troubleshooting-cli-issues","title":"\ud83d\udd27 Troubleshooting CLI Issues","text":""},{"location":"reference/cli_reference/#authentication-problems","title":"Authentication Problems","text":"<pre><code># Always test authentication first\nmigrate_bitbucket_to_github test-auth --workspace WORKSPACE --repo REPO --email EMAIL --gh-owner GH_OWNER --gh-repo REPO --token TOKEN --gh-token GH_TOKEN\n\n# If GitHub authentication fails\ncurl -H \"Authorization: token ghp_...\" https://api.github.com/user\n</code></pre>"},{"location":"reference/cli_reference/#permission-issues","title":"Permission Issues","text":"<pre><code># Check if your token has the right permissions\n# Bitbucket: Test with a simple API call\ncurl -u EMAIL:TOKEN https://api.bitbucket.org/2.0/user\n\n# GitHub: Check repository access\ncurl -H \"Authorization: token ghp_...\" https://api.github.com/repos/OWNER/REPO\n</code></pre>"},{"location":"reference/cli_reference/#large-repository-handling","title":"Large Repository Handling","text":"<pre><code># For large repositories, run phases separately\nmigrate_bitbucket_to_github --config config.json --skip-prs    # Issues only\nmigrate_bitbucket_to_github --config config.json --skip-issues  # PRs only\n</code></pre>"},{"location":"reference/cli_reference/#network-and-timeout-issues","title":"Network and Timeout Issues","text":"<pre><code># The scripts handle rate limiting automatically, but for very slow connections:\n# - Run during off-peak hours\n# - Use --dry-run first to estimate timing\n# - Consider running audit and migration separately\n</code></pre>"},{"location":"reference/cli_reference/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"Topic Reference Description API Tokens <code>api_tokens.md</code> Complete authentication setup guide Configuration <code>migration_config.md</code> Configuration file format and options User Mapping <code>user_mapping.md</code> User mapping strategies and formats Migration Guide <code>../migration_guide.md</code> Step-by-step migration instructions with troubleshooting"},{"location":"reference/cli_reference/#tips-and-best-practices","title":"\ud83d\udca1 Tips and Best Practices","text":""},{"location":"reference/cli_reference/#cli-efficiency","title":"CLI Efficiency","text":"<ul> <li>Use <code>--dry-run</code> first to validate your setup</li> <li>Run scripts during off-peak hours for large repositories</li> <li>Use <code>--use-gh-cli</code> for repositories with many attachments</li> <li>Keep the <code>attachments_temp/</code> directory until migration is verified</li> </ul>"},{"location":"reference/cli_reference/#error-recovery","title":"Error Recovery","text":"<ul> <li>Scripts save partial results if interrupted (Ctrl+C)</li> <li>Check the generated reports for unmapped users or unhandled links</li> <li>Use the mapping files to track what has been migrated</li> </ul>"},{"location":"reference/cli_reference/#maintenance","title":"Maintenance","text":"<ul> <li>Keep API tokens secure and rotate them regularly</li> <li>Archive audit and migration reports for compliance</li> <li>Clean up <code>attachments_temp/</code> after successful migration</li> </ul>"},{"location":"reference/cli_reference/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Run audit script first to understand repository size</li> <li>Use <code>--skip-pr-as-issue</code> for repositories where closed PR metadata isn't needed</li> <li>Consider migrating issues and PRs separately for very large repositories</li> </ul>"},{"location":"reference/cli_reference/#exit-codes","title":"\ud83d\udd0d Exit Codes","text":"Code Meaning Action 0 Success Migration completed successfully 1 Error Check error messages and fix issues <p>For detailed error information, check: - Console output for immediate errors - Generated report files for warnings - Log messages for troubleshooting details</p> <p>This CLI reference focuses on the unified migration tool with subcommands. For complete migration instructions, see the Migration Guide.</p>"},{"location":"reference/migration_attachments/","title":"Attachments Migration","text":""},{"location":"reference/migration_attachments/#migrated-metadata","title":"Migrated Metadata","text":"<ul> <li>File Name and Size: Noted in GitHub comments.</li> <li>Association to Issues/PRs: Comments indicate which issue/PR the attachment belongs to.</li> <li>Download Location: All files saved to <code>attachments_temp/</code> for reference.</li> </ul>"},{"location":"reference/migration_attachments/#what-gets-created","title":"What Gets Created","text":"<p>Comments are added to issues/PRs noting attachments:</p> <pre><code>\ud83d\udcce **Attachment from Bitbucket**: `screenshot.png` (2.5 MB)\n\n*Note: This file was attached to the original Bitbucket issue. Please drag and drop this file from `attachments_temp/screenshot.png` to embed it in this issue.*\n</code></pre> <p>Or with <code>--use-gh-cli</code>:</p> <p><pre><code>\ud83d\udcce **Attachment from Bitbucket**: `screenshot.png` (2.5 MB)\n</code></pre> (File automatically uploaded and embedded)</p>"},{"location":"reference/migration_attachments/#handling-non-migratable-information","title":"Handling Non-Migratable Information","text":"<ul> <li>Direct Upload: GitHub API does not support direct attachment upload; files are downloaded locally to <code>attachments_temp/</code>.</li> <li>Manual Upload Required: Comments are created on GitHub issues with instructions to drag-and-drop files.</li> <li>Auto-Upload Option: With <code>--use-gh-cli</code>, attachments are uploaded automatically using GitHub CLI.</li> <li>Inline Images: Treated as attachments; extracted from markdown and downloaded separately.</li> <li>Large Files: Files are downloaded regardless of size; GitHub has its own upload limits.</li> </ul>"},{"location":"reference/migration_comments/","title":"Comments Migration","text":""},{"location":"reference/migration_comments/#what-gets-migrated","title":"What Gets Migrated","text":"<p>Comments are added to issues/PRs with attribution:</p> <pre><code>**Comment by @alice-github on 2023-05-15:**\n\n[Original comment text]\n</code></pre>"},{"location":"reference/migration_comments/#what-is-preserved","title":"What IS Preserved","text":"<ul> <li>\u2705 Comment Text: Full content including markdown.</li> <li>\u2705 Original Author: @tagged for notifications.</li> <li>\u2705 Original Timestamp: Noted in comment.</li> <li>\u2705 Link Rewrites: Cross-references updated to GitHub URLs.</li> <li>\u2705 @Mentions: Updated to GitHub usernames.</li> <li>\u2705 Attachments: Downloaded and noted (see Attachments section).</li> </ul>"},{"location":"reference/migration_comments/#what-is-not-preserved","title":"What Is NOT Preserved","text":"<ul> <li>\u274c Comment Author: Shows as migration account.</li> <li>\u274c Comment Date: Shows as migration date.</li> <li>\u274c Comment Edit History: Only final version migrated.</li> <li>\u274c Threaded Replies: For PRs migrated as issues, replies are flattened with notes. For PRs migrated as PRs, inline review comments support threading.</li> <li>\u274c Inline Code Comments: PR code review comments are not migrated (except for threaded support in PRs).</li> <li>\u274c Resolved/Unresolved Status: Comment resolution status not preserved.</li> </ul>"},{"location":"reference/migration_comments/#special-handling","title":"Special Handling","text":"<ul> <li>\u2705 Deleted Comments: Comments marked as deleted in Bitbucket are skipped during migration to avoid data pollution.</li> <li>\u2705 Pending Comments: Comments marked as pending approval in Bitbucket are migrated with a clear annotation: [PENDING APPROVAL] at the top of the comment body.</li> <li>\u2705 Threaded Replies:</li> <li>For PRs migrated as GitHub PRs, inline review comments support threading using GitHub's <code>in_reply_to</code> field.</li> <li>For PRs migrated as issues or other cases, replies are flattened with a note: [Reply to Bitbucket Comment {ID}].</li> <li>Comments are processed in topological order to ensure parents are created before replies.</li> </ul>"},{"location":"reference/migration_config/","title":"Migration Configuration Reference","text":"<p>This file defines how the migration tool connects to Bitbucket and GitHub, and how user identities are mapped.</p>"},{"location":"reference/migration_config/#file-overview","title":"\ud83d\udd27 File Overview","text":"<p><code>migration_config.json</code> is generated automatically when you run the audit script. You can edit it before running the actual migration.</p> <pre><code>{\n  \"bitbucket\": {\n    \"workspace\": \"myworkspace\",\n    \"repo\": \"myrepo\",\n    \"email\": \"you@example.com\",\n    \"token\": \"ATAT...\"\n  },\n  \"github\": {\n    \"owner\": \"your-github-username\",\n    \"repo\": \"myrepo\",\n    \"token\": \"ghp_...\"\n  },\n  \"user_mapping\": {\n    \"Alice Smith\": \"alice-smith-gh\",\n    \"Bob Jones\": \"bjones\",\n    \"Unknown (deleted user)\": null\n  },\n  \"repository_mapping\": {\n    \"workspace/other-repo\": \"github-owner/other-repo\",\n    \"workspace/shared-lib\": \"shared-lib\"\n  }\n}\n</code></pre>"},{"location":"reference/migration_config/#key-fields","title":"\ud83d\udd0a Key Fields","text":"Section Key Description <code>bitbucket.workspace</code> Workspace name Bitbucket Cloud workspace containing the repo <code>bitbucket.repo</code> Repository name Name of the Bitbucket repo <code>bitbucket.email</code> Your Atlassian email Required for API authentication <code>bitbucket.token</code> API token Use full-access token; see API Tokens <code>github.owner</code> GitHub user/org name Destination owner for repository <code>github.repo</code> Repository name Destination repo name (must exist and be empty) <code>github.token</code> GitHub PAT Must include <code>repo</code> scope <code>user_mapping</code> Mapping table Links Bitbucket display names to GitHub usernames <code>repository_mapping</code> Repository mapping Maps Bitbucket repositories to GitHub repositories for cross-repo link rewriting"},{"location":"reference/migration_config/#user-mapping-rules","title":"\ud83d\udc65 User Mapping Rules","text":"<ul> <li>If a Bitbucket user does not have a GitHub account, map to <code>null</code>.</li> <li>Deleted users can be represented as <code>\"Unknown (deleted user)\": null</code>.</li> <li>Use GitHub usernames, not emails.</li> <li>You can edit <code>user_mapping</code> manually or import from <code>user_mapping_template.txt</code>.</li> </ul> <p>Example:</p> <pre><code>\"user_mapping\": {\n  \"External Consultant\": null,\n  \"Former Employee\": null,\n  \"Alice\": \"alice-gh\",\n  \"Bob\": \"bob-dev\"\n}\n</code></pre>"},{"location":"reference/migration_config/#repository-mapping","title":"Repository Mapping","text":"<p>This optional section allows automatic rewriting of cross-repository links when migrating multiple related repositories.</p> <pre><code>\"repository_mapping\": {\n  \"workspace/other-repo\": \"github-owner/other-repo\",\n  \"workspace/shared-lib\": \"shared-lib\"\n}\n</code></pre>"},{"location":"reference/migration_config/#supported-link-types","title":"Supported Link Types","text":"<ul> <li>Repository home: <code>https://bitbucket.org/workspace/other-repo</code> \u2192 <code>[other-repo](github_url)</code></li> <li>Issues: <code>https://bitbucket.org/workspace/other-repo/issues/42</code> \u2192 <code>[other-repo #42](github_url)</code> (numbers preserved)</li> <li>Source files: <code>https://bitbucket.org/workspace/other-repo/src/hash/file.cpp</code> \u2192 <code>[other-repo/file.cpp](github_url)</code></li> <li>Commits: <code>https://bitbucket.org/workspace/other-repo/commits/abc123</code> \u2192 <code>[other-repo@abc123](github_url)</code></li> </ul>"},{"location":"reference/migration_config/#not-supported","title":"Not Supported","text":"<ul> <li>Pull Requests (may become issues or be skipped, numbers not predictable)</li> <li>Downloads (use GitHub Releases instead)</li> <li>Wiki pages (migrate wiki separately)</li> <li>Images in repo storage (need manual download/upload)</li> </ul> <p>If you don't specify a GitHub owner (e.g., \"shared-lib\"), it uses the same owner as the current repository.</p> <p>All unmapped/unsafe cross-repo links appear in the \"Unhandled Links\" report.</p>"},{"location":"reference/migration_config/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Use the audit report (<code>audit_report.md</code>) to find active users.</li> <li>Focus mapping on high-activity users.</li> <li>If unsure, set to <code>null</code> \u2014 the tool will still credit them by name in issue text.</li> </ul>"},{"location":"reference/migration_details/","title":"Migration Reference","text":"<p>This reference document provides detailed information on how specific elements from Bitbucket are migrated to GitHub, including what metadata is preserved and how non-migratable information is handled.</p>"},{"location":"reference/migration_details/#overview","title":"Overview","text":"<p>The migration script preserves as much metadata as possible while adapting to GitHub's structure. For elements that cannot be directly migrated (e.g., due to API limitations or platform differences), the script adds contextual notes to descriptions or comments to maintain transparency.</p>"},{"location":"reference/migration_details/#migration-strategy","title":"Migration Strategy","text":""},{"location":"reference/migration_details/#issue-migration","title":"Issue Migration","text":"<ul> <li>All Bitbucket issues become GitHub issues</li> <li>Original numbers are preserved using placeholder issues for gaps</li> <li>Example: BB issues #1, #2, #5 \u2192 GH issues #1, #2, #3 (placeholder), #4 (placeholder), #5</li> </ul>"},{"location":"reference/migration_details/#pull-request-migration","title":"Pull Request Migration","text":"<p>The script uses an intelligent strategy:</p> <ul> <li>OPEN PRs with existing branches \u2192 GitHub PRs (remain open)</li> <li>OPEN PRs with missing branches \u2192 GitHub Issues</li> <li>MERGED/DECLINED/SUPERSEDED PRs \u2192 GitHub Issues (safest approach to avoid re-merging)</li> </ul> <p>This prevents accidentally re-merging already-merged code while preserving all metadata.</p>"},{"location":"reference/migration_details/#known-limitations","title":"Known Limitations","text":""},{"location":"reference/migration_details/#api-restrictions","title":"API Restrictions","text":"<p>These limitations are imposed by GitHub's API and cannot be worked around:</p> <ul> <li>No backdating: GitHub API doesn't allow setting creation dates - all migrated content shows today's date</li> <li>No author spoofing: Cannot create content as other users - all content shows migration account as author</li> <li>No PR reviewers: Cannot set reviewers during PR creation via API</li> <li>No attachment uploads: Direct file upload not supported by standard GitHub API</li> <li>No code review comments: Inline PR code review comments cannot be migrated via API</li> <li>No edit history: Only the final version of content is migrated</li> <li>No watchers: Cannot set issue/PR watchers via API</li> </ul>"},{"location":"reference/migration_details/#platform-differences","title":"Platform Differences","text":"<ul> <li>Shared Numbering: GitHub PRs and issues share the same numbering sequence</li> <li>No Issue Types: GitHub doesn't have 'bug', 'enhancement', etc. as built-in fields (noted in description)</li> <li>No Priority: GitHub doesn't have priority levels (noted in description)</li> <li>No Wiki API: Bitbucket wikis must be migrated separately</li> </ul>"},{"location":"reference/migration_details/#workarounds-implemented","title":"Workarounds Implemented","text":"<ul> <li>Timestamps: Noted in descriptions/comments with original dates</li> <li>Authors: @mentioned for notifications and transparency</li> <li>Reviewers: Listed in PR description for reference</li> <li>Attachments: Downloaded locally, uploaded manually or via <code>--use-gh-cli</code></li> <li>Issue Types/Priority: Noted in description for reference</li> <li>Deleted Issue Numbers: Filled with placeholder issues to preserve numbering</li> </ul>"},{"location":"reference/migration_details/#why-this-matters","title":"Why This Matters","text":"<p>Understanding what is preserved vs. not preserved has important implications for your team:</p>"},{"location":"reference/migration_details/#activity-history-is-lost","title":"Activity History is Lost","text":"<ul> <li>Issues and PRs show as created by the migration account</li> <li>Affects contribution stats and team metrics</li> <li>Cannot filter by \"author:alice\" in GitHub searches</li> <li>All activity credit goes to migration account</li> </ul>"},{"location":"reference/migration_details/#notifications-and-transparency","title":"Notifications and Transparency","text":"<ul> <li>@Mentions Notify Real Users: Original authors are @tagged in descriptions, so they receive notifications and know issues reference them</li> <li>Clear Attribution: Every issue/PR/comment clearly states original author and date</li> <li>Transparency: Notes like \"Migrated from Bitbucket\" make the migration obvious</li> </ul>"},{"location":"reference/migration_details/#continuity-preserved","title":"Continuity Preserved","text":"<ul> <li>Assignees are Preserved: Work assignments remain intact, ensuring continuity</li> <li>Milestones Maintained: Project planning structure preserved</li> <li>Cross-References Work: Links between issues/PRs updated to point to GitHub</li> </ul>"},{"location":"reference/migration_details/#search-and-discovery","title":"Search and Discovery","text":"<ul> <li>Searchability Affected: Original creation dates are not preserved, so time-based searches will use migration dates</li> <li>Content Searchable: All text content is fully searchable in GitHub</li> <li>Link Navigation: Cross-references between issues work correctly</li> </ul>"},{"location":"reference/migration_details/#manual-work-required","title":"Manual Work Required","text":"<ul> <li>Attachments: Must be uploaded manually unless using <code>--use-gh-cli</code></li> <li>Inline Images: May need manual integration into comments</li> <li>Unhandled Links: Some Bitbucket links require manual updates post-migration</li> <li>Unmapped Users: Users without GitHub accounts should be mapped if they later join</li> </ul> <p>This trade-off prioritizes preserving actionable information (assignees, @mentions, cross-references) over historical accuracy (exact authors/dates), while maintaining transparency through descriptive notes. The migration report provides detailed information about what was migrated and what needs manual attention.</p>"},{"location":"reference/migration_details/#migration-details","title":"Migration Details","text":"<ul> <li> <p>Issues</p> </li> <li> <p>Pull Requests</p> </li> <li> <p>Comments </p> </li> <li> <p>Attachments</p> </li> <li> <p>Images</p> </li> <li> <p>Links and Cross-Links</p> </li> <li> <p>@Mentions</p> </li> <li> <p>Milestones</p> </li> </ul>"},{"location":"reference/migration_images/","title":"Images Migration","text":""},{"location":"reference/migration_images/#migrated-metadata","title":"Migrated Metadata","text":"<ul> <li>Image URLs in Markdown: Preserved in text, with notes for manual upload.</li> <li>Alt Text: Maintained in markdown syntax.</li> <li>Bitbucket-Hosted Inline Images: Automatically detected and extracted from markdown.</li> </ul>"},{"location":"reference/migration_images/#what-gets-detected","title":"What Gets Detected","text":"<p>The script scans for:</p> <ul> <li>Markdown image syntax: <code>![alt](https://bitbucket.org/.../image.png)</code></li> <li>Images in issue/PR descriptions</li> <li>Images in comments</li> <li>Bitbucket-hosted images only (external URLs preserved as-is)</li> </ul>"},{"location":"reference/migration_images/#handling-non-migratable-information","title":"Handling Non-Migratable Information","text":"<ul> <li>Bitbucket-Hosted Images: Detected and downloaded to <code>attachments_temp/</code>.</li> <li>Inline Image Detection: Scans issue/PR descriptions and comments for <code>![alt](url)</code> syntax.</li> <li>Upload Notes: Added to descriptions/comments indicating where to find and upload images.</li> <li>With gh CLI: Images are noted for upload; manual integration into comments may be needed due to gh CLI limitations with comment edits.</li> <li>External Images: Images hosted elsewhere (imgur, etc.) are left as-is.</li> </ul>"},{"location":"reference/migration_issues/","title":"Issues Migration","text":""},{"location":"reference/migration_issues/#what-gets-migrated","title":"What Gets Migrated","text":"<p>Issues are created on GitHub with the following structure:</p> <pre><code>**Migrated from Bitbucket**\n- Original Author: @alice-github (or **Alice Smith** *(no GitHub account)*)\n- Original Created: 2023-05-15T10:30:00Z\n- Original URL: https://bitbucket.org/...\n- Kind: bug\n- Priority: major\n\n---\n\n[Original issue description]\n</code></pre> <p>GitHub displays:</p> <ul> <li>Reporter: Your migration account (the person running the script)</li> <li>Created Date: Today (migration date)</li> <li>Assignee: Can be set if mapped (API supports this)</li> </ul>"},{"location":"reference/migration_issues/#what-is-preserved","title":"What IS Preserved","text":"<ul> <li>\u2705 Issue Numbers: Preserved exactly from Bitbucket (placeholders fill gaps).</li> <li>\u2705 Title: Migrated as-is.</li> <li>\u2705 Description: Full content with markdown preserved.</li> <li>\u2705 Assignees: Set via API if user mapping exists.</li> <li>\u2705 Labels: Applied (e.g., 'migrated-from-bitbucket').</li> <li>\u2705 Milestones: Automatically created on GitHub and applied to issues.</li> <li>\u2705 State (open/closed): Set based on original state.</li> <li>\u2705 Original Timestamps: Mentioned in description.</li> <li>\u2705 Original Authors: Mentioned and @tagged in description for notifications.</li> <li>\u2705 Votes: Noted in description.</li> <li>\u2705 Kind and Priority: Noted in description.</li> </ul>"},{"location":"reference/migration_issues/#what-is-not-preserved","title":"What Is NOT Preserved","text":"<ul> <li>\u274c Original Author as Creator: API limitation - migration account is shown as creator.</li> <li>\u274c Original Creation Date: API limitation - shows migration date.</li> <li>\u274c Watchers: No equivalent field in GitHub.</li> <li>\u274c Custom Fields: Bitbucket custom fields are not migrated.</li> </ul>"},{"location":"reference/migration_issues/#handling-non-migratable-information","title":"Handling Non-Migratable Information","text":"<ul> <li>Deleted Users: Noted as \"Unknown (deleted user)\" in description and comments.</li> <li>Unmapped Users: Mentioned as \"Name (no GitHub account)\" in description; not assigned.</li> <li>Placeholders for Gaps: Issues deleted in Bitbucket are created as closed placeholder issues to maintain numbering.</li> <li>Attachments and Images: See Attachment Migration and Image Migration.</li> </ul>"},{"location":"reference/migration_links/","title":"Links and Cross-Links Migration","text":""},{"location":"reference/migration_links/#what-gets-rewritten","title":"What Gets Rewritten","text":""},{"location":"reference/migration_links/#same-repository-links-automatic","title":"Same Repository Links (Automatic)","text":"<p>No configuration needed - these are automatically rewritten:</p> <ul> <li>Issues: <code>https://bitbucket.org/workspace/repo/issues/42</code> \u2192 <code>[#45](github_url)</code> (was BB #42)</li> <li>Source Files: <code>https://bitbucket.org/.../src/hash/file.cpp#lines-143</code> \u2192 <code>[file.cpp](github_url#L143)</code></li> <li>Commits: <code>https://bitbucket.org/.../commits/abc123</code> \u2192 <code>[abc123](github_url)</code></li> <li>Short References: <code>#123</code> \u2192 <code>[#125](github_url)</code> (was BB #123)</li> <li>PR References: <code>PR #45</code> \u2192 <code>[#127](github_url)</code> (was BB PR #45, migrated as issue)</li> </ul>"},{"location":"reference/migration_links/#cross-repository-links-requires-configuration","title":"Cross-Repository Links (Requires Configuration)","text":"<p>Add <code>repository_mapping</code> to your config to enable:</p> <ul> <li>Repository Home: <code>https://bitbucket.org/workspace/other-repo</code> \u2192 <code>[other-repo](github_url)</code></li> <li>Issues: <code>https://bitbucket.org/workspace/other-repo/issues/42</code> \u2192 <code>[other-repo #42](github_url)</code></li> <li>Source Files: <code>https://bitbucket.org/workspace/other-repo/src/hash/file.cpp</code> \u2192 <code>[other-repo/file.cpp](github_url)</code></li> <li>Commits: <code>https://bitbucket.org/workspace/other-repo/commits/abc123</code> \u2192 <code>[other-repo@abc123d](github_url)</code></li> </ul>"},{"location":"reference/migration_links/#what-is-not-rewritten","title":"What Is NOT Rewritten","text":"<ul> <li>Pull Requests: Cross-repo PR links (numbers are unpredictable)</li> <li>Wiki Pages: <code>https://bitbucket.org/.../wiki/</code></li> <li>Downloads: <code>https://bitbucket.org/.../downloads/</code></li> <li>Branches/Tags: <code>https://bitbucket.org/.../branch/feature</code></li> <li>New PR/Compare Pages: UI-specific URLs</li> <li>Repository Images: <code>https://bitbucket.org/repo/UUID/images/...</code></li> </ul>"},{"location":"reference/migration_links/#handling-non-migratable-information","title":"Handling Non-Migratable Information","text":"<ul> <li>Unhandled Links: Flagged in migration reports with context.</li> <li>Current Repository Links: Automatically rewritten without needing repository_mapping.</li> <li>Cross-Repo PR Links: Cannot be rewritten (PR numbers unpredictable).</li> <li>Cross-Repo Issue Links: Can be rewritten if repository_mapping configured.</li> <li>Original References: Preserved in italics for context (e.g., (was <code>[BB #123](bitbucket_url)</code>)).</li> <li>Manual Attention: Unmapped cross-repo links or unsupported types require manual review post-migration.</li> <li>Line Numbers: Bitbucket's <code>#lines-143</code> format converted to GitHub's <code>#L143</code>.</li> </ul>"},{"location":"reference/migration_mentions/","title":"Mentions Migration","text":""},{"location":"reference/migration_mentions/#what-gets-migrated","title":"What Gets Migrated","text":"<ul> <li>@Mentions: Mapped to GitHub usernames using <code>user_mapping</code>.</li> <li>Account IDs: Automatically resolved by cross-referencing with issue/PR participants, or via Bitbucket API lookup.</li> <li>Display Names: Used when Bitbucket username is not available.</li> </ul>"},{"location":"reference/migration_mentions/#formats-supported","title":"Formats Supported","text":"<p>The script handles multiple @mention formats:</p> <ul> <li>Simple: <code>@username</code></li> <li>Braced: <code>@{username-with-dashes}</code></li> <li>Spaces: <code>@{user name with spaces}</code></li> <li>Account IDs: <code>@557058:c250d1e9-df76-4236-bc2f-a98d056b56b5</code></li> </ul>"},{"location":"reference/migration_mentions/#what-is-preserved","title":"What IS Preserved","text":"<ul> <li>\u2705 @Mention Intent: Users are notified via GitHub @mentions.</li> <li>\u2705 Context: Original mention preserved if unmapped.</li> <li>\u2705 Display Names: Used for readability when username unavailable.</li> </ul>"},{"location":"reference/migration_mentions/#handling-non-migratable-information","title":"Handling Non-Migratable Information","text":"<ul> <li>Unmapped Users: Preserved as \"@username (Bitbucket user, needs GitHub mapping)\".</li> <li>Account IDs with Display Names: Replaced with \"Display Name (Bitbucket user, no GitHub account)\".</li> <li>Unresolvable Account IDs: If API lookup fails (403 or deleted user), left as-is with warning note.</li> <li>Deleted Users: Noted as \"Unknown (deleted user)\".</li> <li>No GitHub Account: Users mapped to <code>null</code> are mentioned in text but not assigned or @tagged.</li> </ul>"},{"location":"reference/migration_mentions/#resolution-process","title":"Resolution Process","text":"<ol> <li>Check if mention is a username or account ID</li> <li>If account ID, resolve to username via:</li> <li>Issue/PR participant data (primary method)</li> <li>Bitbucket API lookup (fallback if not found)</li> <li>Display name only (if username unavailable)</li> <li>Map username/display name to GitHub via <code>user_mapping</code></li> <li>If mapped: Replace with GitHub @mention</li> <li>If not mapped but have display name: Use readable format</li> <li>If not mapped and no display name: Preserve with note</li> </ol>"},{"location":"reference/migration_milestones/","title":"Milestones Migration","text":""},{"location":"reference/migration_milestones/#what-gets-migrated","title":"What Gets Migrated","text":"<p>Milestones are automatically created on GitHub during migration:</p> <ul> <li>Name: Preserved exactly from Bitbucket</li> <li>State: Created as 'open' by default</li> <li>Assignment: Applied to issues that had milestones in Bitbucket</li> </ul>"},{"location":"reference/migration_milestones/#what-is-preserved","title":"What IS Preserved","text":"<ul> <li>\u2705 Milestone Names: Created on GitHub with exact names.</li> <li>\u2705 Milestone Descriptions: Migrated from Bitbucket if present.</li> <li>\u2705 Due Dates: Migrated and set on GitHub milestones.</li> <li>\u2705 Issue Associations: Issues are assigned to correct milestones.</li> <li>\u2705 PR Associations: PRs (and PRs-as-issues) are assigned to correct milestones.</li> <li>\u2705 Milestone Mapping: Tracked in migration report.</li> </ul>"},{"location":"reference/migration_milestones/#what-is-not-preserved","title":"What Is NOT Preserved","text":"<ul> <li>\u274c Completion Percentage: Calculated by GitHub based on closed issues.</li> <li>\u274c Milestone State: All created as 'open' (GitHub updates based on issue completion).</li> </ul>"},{"location":"reference/migration_milestones/#handling-non-migratable-information","title":"Handling Non-Migratable Information","text":"<ul> <li>Duplicate Names: If milestone already exists on GitHub, existing one is used.</li> <li>Creation Tracking: All created/mapped milestones listed in migration report.</li> <li>Pre-Creation: All milestones are created upfront before issue/PR migration begins.</li> </ul>"},{"location":"reference/migration_pull_requests/","title":"Pull Requests Migration","text":""},{"location":"reference/migration_pull_requests/#what-gets-migrated","title":"What Gets Migrated","text":"<p>Pull Requests follow a similar pattern to issues:</p> <pre><code>**Migrated from Bitbucket**\n- Original Author: @alice-github (or **Alice Smith** *(no GitHub account)*)\n- Original Created: 2023-05-15T10:30:00Z\n- Original URL: https://bitbucket.org/...\n\n---\n\n[Original PR description]\n</code></pre> <p>For PRs migrated as GitHub Issues (merged/closed/declined):</p> <pre><code>\u26a0\ufe0f **This was a Pull Request on Bitbucket (migrated as an issue)**\n\n**Original PR Metadata:**\n- Author: @alice-github\n- State: MERGED\n- Created: 2023-05-15T10:30:00Z\n- Updated: 2023-05-16T14:22:00Z\n- Source Branch: `feature-xyz`\n- Destination Branch: `main`\n- Original URL: https://bitbucket.org/...\n\n---\n\n**Description:**\n\n[Original PR description]\n\n---\n\n*Note: This PR was merged on Bitbucket. It was migrated as a GitHub issue to preserve all metadata and comments. The actual code changes are in the git history.*\n</code></pre> <p>GitHub displays:</p> <ul> <li>Author: Migration account (API limitation).</li> <li>Created Date: Migration date.</li> <li>Assignees: Can be set if mapped.</li> </ul>"},{"location":"reference/migration_pull_requests/#what-is-preserved","title":"What IS Preserved","text":"<ul> <li>\u2705 Title: Migrated as-is (prefixed with <code>[PR #N]</code> if migrated as issue).</li> <li>\u2705 Description: Full content with markdown preserved.</li> <li>\u2705 Assignees: Set via API if user mapping exists.</li> <li>\u2705 Labels: Applied (e.g., 'migrated-from-bitbucket', 'original-pr', 'pr-merged').</li> <li>\u2705 State: Open PRs remain open; merged/closed PRs become closed issues.</li> <li>\u2705 Original Timestamps: Mentioned in description.</li> <li>\u2705 Original Authors: Mentioned and @tagged in description.</li> <li>\u2705 Source/Destination Branches: Noted in description.</li> <li>\u2705 Commit Count: Noted in description.</li> <li>\u2705 Participant Count: Noted in description.</li> </ul>"},{"location":"reference/migration_pull_requests/#what-is-not-preserved","title":"What Is NOT Preserved","text":"<ul> <li>\u274c PR Numbers: PRs share GitHub's issue numbering sequence, so numbers may change.</li> <li>\u274c Original Author as Creator: Migration account is shown as author.</li> <li>\u274c Original Creation Date: Shows migration date.</li> <li>\u274c Reviewers: Cannot be set via API during creation (noted in description).</li> <li>\u274c Approval Status: PR reviews cannot be migrated (noted in description).</li> <li>\u274c Code Review Comments: Inline code comments are not migrated (general comments are).</li> <li>\u274c Diff View: For PRs migrated as issues, no interactive diff available.</li> </ul>"},{"location":"reference/migration_pull_requests/#handling-non-migratable-information","title":"Handling Non-Migratable Information","text":"<ul> <li>Merged/Declined PRs: Migrated as closed issues to preserve metadata without risking re-merge.</li> <li>Missing Branches: PRs with missing branches become issues; noted in description.</li> <li>Deleted Users: Noted as \"Unknown (deleted user)\".</li> <li>Unmapped Users: Mentioned as \"Name (no GitHub account)\".</li> <li>Labels: Added based on original state (e.g., 'pr-merged', 'pr-declined', 'original-pr').</li> <li>Reviewers: Listed in PR description but not set as official reviewers.</li> </ul>"},{"location":"reference/user_mapping/","title":"User Mapping Reference","text":"<p>User mapping ensures migrated issues, pull requests, and comments are correctly attributed to GitHub users. This document provides comprehensive guidance on configuring user mappings to handle all Bitbucket user identification scenarios during migration.</p>"},{"location":"reference/user_mapping/#overview","title":"\ud83c\udfaf Overview","text":"<p>The migration tool supports multiple user identification methods in Bitbucket and maps them to GitHub usernames. Understanding these mechanisms is crucial for accurate user attribution and @mention functionality.</p> <p>Key Concepts:</p> <ul> <li>Display Names: Human-readable names shown in Bitbucket UI</li> <li>Usernames: Internal Bitbucket usernames used in @mentions</li> <li>Account IDs: Internal Bitbucket identifiers (UUIDs) used in API responses</li> <li>GitHub Usernames: Target GitHub usernames for mapping</li> </ul>"},{"location":"reference/user_mapping/#user-mapping-formats","title":"\ud83d\udccb User Mapping Formats","text":"<p>The migration tool supports multiple mapping formats to handle different Bitbucket user identification scenarios.</p>"},{"location":"reference/user_mapping/#format-1-simple-display-name-mapping","title":"Format 1: Simple Display Name Mapping","text":"<p>Maps Bitbucket display names directly to GitHub usernames. Best for basic use cases.</p> <pre><code>\"user_mapping\": {\n  \"Alice Smith\": \"alice-github\",\n  \"Bob Jones\": \"bobjones\",\n  \"Charlie Brown\": null,\n  \"External Contractor\": null\n}\n</code></pre> <p>Use when: - @mentions are infrequent or not critical - Simple one-to-one mapping is sufficient - Manual @mention fixes after migration are acceptable</p>"},{"location":"reference/user_mapping/#format-2-enhanced-mapping-recommended","title":"Format 2: Enhanced Mapping (Recommended)","text":"<p>Provides complete mapping information including both display names and Bitbucket usernames. Essential for @mention support.</p> <pre><code>\"user_mapping\": {\n  \"Alice Smith\": {\n    \"github\": \"alice-github\",\n    \"bitbucket_username\": \"asmith\"\n  },\n  \"Bob Jones\": {\n    \"github\": \"bobjones\",\n    \"bitbucket_username\": \"bjones\"\n  },\n  \"Charlie Brown\": null,\n  \"External Contractor\": null\n}\n</code></pre> <p>Use when: - Team uses @mentions frequently - Maximum compatibility required - Account ID mentions need proper resolution</p>"},{"location":"reference/user_mapping/#format-3-direct-username-mapping","title":"Format 3: Direct Username Mapping","text":"<p>Maps Bitbucket usernames directly to GitHub usernames. Useful for @mention-only scenarios.</p> <pre><code>\"user_mapping\": {\n  \"asmith\": \"alice-github\",\n  \"bjones\": \"bobjones\",\n  \"old-user\": null\n}\n</code></pre> <p>Use when: - You only need to fix @mentions - Display names are handled separately - Quick mapping for specific users</p>"},{"location":"reference/user_mapping/#format-4-mixed-format","title":"Format 4: Mixed Format","text":"<p>Combines multiple formats for maximum flexibility.</p> <pre><code>\"user_mapping\": {\n  \"Alice Smith\": {\n    \"github\": \"alice-github\",\n    \"bitbucket_username\": \"asmith\"\n  },\n  \"Bob Jones\": \"bobjones\",\n  \"charlie\": \"charlie-dev\",\n  \"external-user\": null,\n  \"contractor\": null\n}\n</code></pre> <p>Use when: - Different users require different mapping approaches - Complex organizational structures - Gradual migration of mapping strategies</p>"},{"location":"reference/user_mapping/#account-id-resolution","title":"\ud83d\udd0d Account ID Resolution","text":"<p>Bitbucket uses internal account IDs that appear in content and API responses. The migration tool automatically resolves these to usernames.</p>"},{"location":"reference/user_mapping/#account-id-formats","title":"Account ID Formats","text":"<p>AAID Format (Modern): <pre><code>@557058:c250d1e9-df76-4236-bc2f-a98d056b56b5\n</code></pre> - Contains colons (:) - UUID-like structure - Most common in current Bitbucket instances</p> <p>Legacy Format: <pre><code>@5d80e691b29eab0c3cba6a2e\n</code></pre> - Exactly 24 hexadecimal characters - No colons - From older Bitbucket instances</p>"},{"location":"reference/user_mapping/#how-resolution-works","title":"How Resolution Works","text":"<ol> <li>Collection Phase: Migration tool scans all Bitbucket data to build account ID mappings</li> <li> <p>API Data Extraction: Extracts <code>account_id</code> \u2192 <code>username</code> relationships from:</p> <ul> <li>Issue reporters and assignees</li> <li>PR authors and participants</li> <li>Comment authors</li> <li>Commit authors</li> </ul> </li> <li> <p>Runtime Resolution: During migration:</p> <ul> <li>Account IDs in content are identified</li> <li>Resolved to Bitbucket usernames using collected mappings</li> <li>Usernames are then mapped to GitHub usernames</li> <li>Unresolvable IDs are handled gracefully</li> </ul> </li> </ol>"},{"location":"reference/user_mapping/#resolution-example","title":"Resolution Example","text":"<pre><code>// During migration, this account ID:\n\"@557058:c250d1e9-df76-4236-bc2f-a98d056b56b5\"\n\n// Gets resolved through these steps:\n// 1. Account ID found in API data for user \"asmith\"\n// 2. \"asmith\" maps to display name \"Alice Smith\"\n// 3. \"Alice Smith\" maps to GitHub username \"alice-github\"\n// 4. Final result: \"@alice-github\"\n</code></pre>"},{"location":"reference/user_mapping/#mention-processing","title":"\ud83d\udcac @Mention Processing","text":"<p>The migration tool processes @mentions in all content and rewrites them to GitHub format.</p>"},{"location":"reference/user_mapping/#processing-strategy","title":"Processing Strategy","text":"<ol> <li> <p>Pattern Detection: Uses regex to find @mentions in:</p> <ul> <li>Issue descriptions</li> <li>PR descriptions</li> <li>Comments (issues and PRs)</li> <li>Any markdown content</li> </ul> </li> <li> <p>Format Handling: Processes multiple @mention formats:</p> <ul> <li><code>@username</code> (standard)</li> <li><code>@{user name}</code> (with braces for special characters)</li> <li><code>@557058:c250d1e9-...</code> (account IDs)</li> </ul> </li> <li> <p>Mapping Application: For each mention found:</p> <ul> <li>Extract the Bitbucket identifier</li> <li>Apply user mapping configuration</li> <li>Generate appropriate GitHub mention or fallback</li> </ul> </li> </ol>"},{"location":"reference/user_mapping/#mention-patterns","title":"@Mention Patterns","text":"<p>Standard Username: <pre><code>Original: @asmith mentioned this issue\nMapped:   @alice-github mentioned this issue\n</code></pre></p> <p>Braced Username: <pre><code>Original: @{john.doe} commented on the PR\nMapped:   @john-doe commented on the PR\n</code></pre></p> <p>Account ID: <pre><code>Original: @557058:c250d1e9-df76-4236-bc2f-a98d056b56b5 needs to review\nMapped:   @alice-github needs to review\n</code></pre></p>"},{"location":"reference/user_mapping/#unmapped-mention-handling","title":"Unmapped @Mention Handling","text":"<p>When @mentions cannot be mapped:</p> <p>For Account IDs with Display Names: <pre><code>Original: @557058:c250d1e9-df76-4236-bc2f-a98d056b56b5 commented\nBecomes: **Alice Smith** *(Bitbucket user, no GitHub account)*\n</code></pre></p> <p>For Usernames without Display Names: <pre><code>Original: @unknown-user mentioned this\nBecomes: @unknown-user *(Bitbucket user, needs GitHub mapping)*\n</code></pre></p>"},{"location":"reference/user_mapping/#validation-and-error-handling","title":"\u2705 Validation and Error Handling","text":"<p>The migration tool includes comprehensive validation and error handling for user mappings.</p>"},{"location":"reference/user_mapping/#pre-migration-validation","title":"Pre-Migration Validation","text":"<p>Configuration Validation:</p> <ul> <li>Verifies <code>user_mapping</code> section exists</li> <li>Checks for valid JSON structure</li> <li>Validates mapping value types</li> </ul> <p>Connection Testing:</p> <ul> <li>Tests Bitbucket API connectivity</li> <li>Tests GitHub API connectivity (read-only)</li> <li>Validates repository access permissions</li> </ul> <p>User Mapping Diagnostics:</p> <ul> <li>Scans all content for @mentions and account IDs</li> <li>Tests mapping resolution for found mentions</li> <li>Reports unmappable mentions with suggestions</li> </ul>"},{"location":"reference/user_mapping/#runtime-error-handling","title":"Runtime Error Handling","text":"<p>Mapping Failures:</p> <ul> <li>Gracefully handles missing user mappings</li> <li>Preserves original content when mapping fails</li> <li>Logs detailed information for post-migration review</li> </ul> <p>API Errors:</p> <ul> <li>Handles temporary API failures</li> <li>Retries failed operations where appropriate</li> <li>Provides clear error messages for configuration issues</li> </ul> <p>Data Issues:</p> <ul> <li>Handles deleted or inaccessible users</li> <li>Manages missing branch information for PRs</li> <li>Processes malformed or corrupted content</li> </ul>"},{"location":"reference/user_mapping/#logging-and-reporting","title":"Logging and Reporting","text":"<p>Migration Log Output: <pre><code>[2024-01-15 10:30:15] \u2192 @mentions: 45 mapped, 3 unmapped/replaced\n[2024-01-15 10:30:15]     (Account IDs replaced with display names where available)\n</code></pre></p> <p>Migration Report Sections:</p> <ul> <li>User mapping summary with success/failure counts</li> <li>Unmapped mentions report with resolution suggestions</li> <li>Account ID resolution statistics</li> <li>Troubleshooting recommendations</li> </ul>"},{"location":"reference/user_mapping/#integration-with-audit-script","title":"\ud83d\udee0\ufe0f Integration with Audit Script","text":"<p>The audit subcommand (<code>migrate_bitbucket_to_github audit</code>) is essential for effective user mapping configuration.</p>"},{"location":"reference/user_mapping/#user-discovery-process","title":"User Discovery Process","text":"<ol> <li> <p>Run Initial Audit: <pre><code>migrate_bitbucket_to_github audit --workspace YOUR_WORKSPACE --repo YOUR_REPO --email YOUR_EMAIL\n</code></pre></p> </li> <li> <p>Review Generated Files:</p> <ul> <li><code>bitbucket_audit_report.json</code> - Complete audit data</li> <li><code>audit_report.md</code> - Human-readable analysis</li> <li><code>user_mapping_template.txt</code> - Mapping template with activity counts</li> </ul> </li> <li> <p>Analyze User Activity: The audit provides:</p> <ul> <li>Complete list of all users found in repository</li> <li>Activity breakdown (issues, PRs, comments, commits)</li> <li>Bitbucket usernames for each user</li> <li>Account ID mentions and their contexts</li> </ul> </li> </ol>"},{"location":"reference/user_mapping/#using-audit-results","title":"Using Audit Results","text":"<p>Activity-Based Prioritization: <pre><code># From user_mapping_template.txt:\n# Alice Smith\n#   Bitbucket username: asmith\n#   Activity: 15 issues, 8 PRs, 45 comments\n#   Total: 68\n#\n# Bob Jones\n#   Bitbucket username: bjones\n#   Activity: 3 issues, 12 PRs, 23 comments\n#   Total: 38\n</code></pre></p> <p>Account ID Analysis: The audit identifies items containing account ID mentions:</p> <ul> <li>Lists specific issues/PRs with account IDs</li> <li>Shows types of account IDs found</li> <li>Provides context for investigation</li> </ul>"},{"location":"reference/user_mapping/#configuration-generation","title":"Configuration Generation","text":"<p>Generate Complete Configuration: <pre><code>migrate_bitbucket_to_github audit --workspace YOUR_WORKSPACE --repo YOUR_REPO --email YOUR_EMAIL \\\n  --gh-owner YOUR_GITHUB_USER --gh-repo YOUR_REPO\n</code></pre></p> <p>Generated Files:</p> <ul> <li><code>migration_config.json</code> - Complete configuration template</li> <li><code>user_mapping_template.txt</code> - Detailed mapping reference</li> </ul>"},{"location":"reference/user_mapping/#setup-and-configuration","title":"\ud83d\udd27 Setup and Configuration","text":""},{"location":"reference/user_mapping/#step-1-run-audit-for-user-discovery","title":"Step 1: Run Audit for User Discovery","text":"<pre><code>migrate_bitbucket_to_github audit --workspace myworkspace --repo myrepo --email user@example.com\n</code></pre>"},{"location":"reference/user_mapping/#step-2-review-user-activity","title":"Step 2: Review User Activity","text":"<p>Examine <code>audit_report.md</code> and <code>user_mapping_template.txt</code>:</p> <ul> <li>Identify high-activity users (focus mapping effort here first)</li> <li>Note Bitbucket usernames for @mention support</li> <li>Identify users without GitHub accounts</li> </ul>"},{"location":"reference/user_mapping/#step-3-create-user-mapping-configuration","title":"Step 3: Create User Mapping Configuration","text":"<p>For teams with frequent @mentions: <pre><code>\"user_mapping\": {\n  \"Alice Smith\": {\n    \"github\": \"alice-github\",\n    \"bitbucket_username\": \"asmith\"\n  },\n  \"Bob Jones\": {\n    \"github\": \"bobjones\",\n    \"bitbucket_username\": \"bjones\"\n  },\n  \"External User\": null\n}\n</code></pre></p> <p>For simple cases: <pre><code>\"user_mapping\": {\n  \"Alice Smith\": \"alice-github\",\n  \"Bob Jones\": \"bobjones\",\n  \"External User\": null\n}\n</code></pre></p>"},{"location":"reference/user_mapping/#step-4-test-configuration","title":"Step 4: Test Configuration","text":"<pre><code>migrate_bitbucket_to_github dry-run --config migration_config.json\n</code></pre> <p>Review the output for:</p> <ul> <li>Unmapped @mentions warnings</li> <li>Account ID resolution messages</li> <li>User mapping validation errors</li> </ul>"},{"location":"reference/user_mapping/#step-5-refine-and-iterate","title":"Step 5: Refine and Iterate","text":"<ul> <li>Add missing GitHub usernames based on dry-run feedback</li> <li>Update account ID mappings if needed</li> <li>Re-run dry-run until no unmapped mentions remain</li> </ul>"},{"location":"reference/user_mapping/#troubleshooting-and-common-issues","title":"\ud83d\udea8 Troubleshooting and Common Issues","text":""},{"location":"reference/user_mapping/#issue-1-unmapped-mentions-after-migration","title":"Issue 1: Unmapped @Mentions After Migration","text":"<p>Symptoms:</p> <ul> <li>@mentions show as <code>@username *(Bitbucket user, needs GitHub mapping)*</code></li> <li>Account IDs appear as <code>**Display Name** *(Bitbucket user, no GitHub account)*</code></li> </ul> <p>Solutions:</p> <ol> <li> <p>Add Missing Username Mappings: <pre><code>\"user_mapping\": {\n  \"Display Name\": {\n    \"github\": \"github-username\",\n    \"bitbucket_username\": \"bb-username\"\n  }\n}\n</code></pre></p> </li> <li> <p>Check Audit Results:</p> <ul> <li>Review <code>user_mapping_template.txt</code> for complete user list</li> <li>Check activity counts to prioritize mapping effort</li> </ul> </li> <li> <p>Manual Fix on GitHub:</p> <ul> <li>Search for <code>*(Bitbucket user, needs GitHub mapping)*</code> pattern</li> <li>Edit mentions directly on GitHub</li> </ul> </li> </ol>"},{"location":"reference/user_mapping/#issue-2-account-ids-not-resolving","title":"Issue 2: Account IDs Not Resolving","text":"<p>Symptoms:</p> <ul> <li>Account IDs appear in content after migration</li> <li>Users report broken @mentions</li> </ul> <p>Solutions:</p> <ol> <li> <p>Verify API Permissions: <pre><code># Ensure your Bitbucket API token has user read permissions\nmigrate_bitbucket_to_github audit --workspace WORKSPACE --repo REPO --email EMAIL\n</code></pre></p> </li> <li> <p>Check Account ID Format:</p> <ul> <li>AAID format: <code>@557058:c250d1e9-df76-4236-bc2f-a98d056b56b5</code></li> <li>Legacy format: <code>@5d80e691b29eab0c3cba6a2e</code></li> </ul> </li> <li> <p>Manual Resolution:</p> <ul> <li>Look up account ID in original Bitbucket content</li> <li>Find corresponding username in audit results</li> <li>Add explicit mapping</li> </ul> </li> </ol>"},{"location":"reference/user_mapping/#issue-3-mixed-user-identification-methods","title":"Issue 3: Mixed User Identification Methods","text":"<p>Symptoms:</p> <ul> <li>Some users map correctly, others don't</li> <li>Inconsistent @mention behavior</li> </ul> <p>Solutions:</p> <ol> <li> <p>Use Enhanced Format for All Users: <pre><code>\"user_mapping\": {\n  \"User Name\": {\n    \"github\": \"github-username\",\n    \"bitbucket_username\": \"bb-username\"\n  }\n}\n</code></pre></p> </li> <li> <p>Standardize on Single Format:</p> <ul> <li>Choose either simple or enhanced format</li> <li>Apply consistently across all users</li> <li>Test thoroughly with dry-run</li> </ul> </li> </ol>"},{"location":"reference/user_mapping/#issue-4-large-number-of-unmapped-users","title":"Issue 4: Large Number of Unmapped Users","text":"<p>Symptoms:</p> <ul> <li>Many users without GitHub accounts</li> <li>Extensive unmapped mentions</li> </ul> <p>Solutions:</p> <ol> <li> <p>Prioritize by Activity:</p> <ul> <li>Focus on users with high activity counts first</li> <li>Use audit results to identify key contributors</li> </ul> </li> <li> <p>Batch Processing:</p> <ul> <li>Map users in phases (high \u2192 medium \u2192 low activity)</li> <li>Run multiple dry-run iterations</li> </ul> </li> <li> <p>Set Realistic Expectations:</p> <ul> <li>Accept that some users may remain unmapped</li> <li>Plan for manual fixes post-migration</li> </ul> </li> </ol>"},{"location":"reference/user_mapping/#validation-checklist","title":"\u2705 Validation Checklist","text":""},{"location":"reference/user_mapping/#pre-migration-validation_1","title":"Pre-Migration Validation","text":"<ul> <li>[ ] Run audit script and review all generated files</li> <li>[ ] Verify all high-activity users have GitHub accounts</li> <li>[ ] Check that @mention-heavy users use enhanced format</li> <li>[ ] Run dry-run and verify no unmapped mentions</li> <li>[ ] Confirm account ID resolution is working</li> <li>[ ] Test GitHub API connectivity and permissions</li> </ul>"},{"location":"reference/user_mapping/#configuration-validation","title":"Configuration Validation","text":"<ul> <li>[ ] <code>user_mapping</code> section exists in config</li> <li>[ ] All users have valid GitHub usernames or <code>null</code></li> <li>[ ] Enhanced format used for frequent @mention users</li> <li>[ ] No duplicate or conflicting mappings</li> <li>[ ] Configuration file is valid JSON</li> </ul>"},{"location":"reference/user_mapping/#content-validation","title":"Content Validation","text":"<ul> <li>[ ] All @mentions resolve to valid GitHub usernames</li> <li>[ ] Account IDs resolve to display names or usernames</li> <li>[ ] No broken user references in issue/PR content</li> <li>[ ] User assignment works correctly</li> <li>[ ] Comment attribution is accurate</li> </ul>"},{"location":"reference/user_mapping/#post-migration-validation","title":"Post-Migration Validation","text":"<ul> <li>[ ] Search GitHub repository for unmapped mention patterns</li> <li>[ ] Verify user assignments are correct</li> <li>[ ] Check that @mentions work in GitHub interface</li> <li>[ ] Confirm no account IDs remain in content</li> <li>[ ] Validate cross-references between issues/PRs</li> </ul>"},{"location":"reference/user_mapping/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"reference/user_mapping/#1-always-run-audit-first","title":"1. Always Run Audit First","text":"<p>The audit subcommand provides essential user discovery and analysis capabilities.</p>"},{"location":"reference/user_mapping/#2-use-enhanced-format-for-mentions","title":"2. Use Enhanced Format for @Mentions","text":"<p>When @mentions are important to your team, use the enhanced mapping format.</p>"},{"location":"reference/user_mapping/#3-test-thoroughly-with-dry-run","title":"3. Test Thoroughly with Dry-Run","text":"<p>Run multiple dry-run iterations and address all unmapped mentions before actual migration.</p>"},{"location":"reference/user_mapping/#4-prioritize-by-activity-level","title":"4. Prioritize by Activity Level","text":"<p>Focus mapping efforts on users with high activity counts first.</p>"},{"location":"reference/user_mapping/#5-plan-for-manual-fixes","title":"5. Plan for Manual Fixes","text":"<p>Accept that some edge cases may require manual fixes after migration.</p>"},{"location":"reference/user_mapping/#6-document-mapping-decisions","title":"6. Document Mapping Decisions","text":"<p>Keep notes on why certain users were mapped (or not mapped) for future reference.</p>"},{"location":"reference/user_mapping/#7-validate-post-migration","title":"7. Validate Post-Migration","text":"<p>Thoroughly validate user attribution and @mention functionality after migration.</p>"}]}